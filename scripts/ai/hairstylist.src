// npc barber by zulu (zulu@cadvision.com)
// created January 31, 2000
// updated March 31, 2000

use npc;
use basic;
use os;
use uo;

include "include/eventid";
include "include/randname";
include "include/objtype";
include "include/utility";
include "include/mrcspawn";
include "include/speech";
include "include/client";
include "include/vetement";
include "ai/setup/modsetup";
include "include/random";

const RESPAWN_MINUTES := 30;     // In how many minutes will the NPC respawn if killed.
const MAX_SKILLS      := 48;     // There are currently 48 Skills.
Const REACT_THRESHOLD := 2;

set_priority( 50 );

var storage, inv_fs, inv_pb, inv_1c;
var merchant_type := "barber";
var me := Self();

if( me.name["<random>"] )
case( Random(2) )
0: me.graphic := 400; me.gender := 0;
1: me.graphic := 401; me.gender := 1;
endcase
      Habille( me , "barber" );
endif

storage := FindStorageArea( "Merchant Storage" );

if (!storage)
    exit;
endif

inv_fs := find_or_create_item( storage, me.serial + " FS", UOBJ_METALCHEST );
inv_pb := find_or_create_item( storage, me.serial + " PB", UOBJ_METALCHEST );
inv_1c := find_or_create_item( storage, me.serial + " 1C", UOBJ_METALCHEST );

if (!inv_fs or !inv_pb or !inv_1c)
    exit;
endif

RestockInventory( merchant_type, inv_fs );
var next_restock := ReadGameClock() + RESPAWN_MINUTES*60;

EnableEvents( SYSEVENT_ITEM_GIVEN );
EnableEvents( SYSEVENT_SPEECH , REACT_THRESHOLD );

while (1)

    var ev, hairwhere, hairtemp, hairold,res;

    ev := os::wait_for_event( 30 );
    if (ev)

        case (ev.type)
            SYSEVENT_SPEECH:
                if (ev.text["buy"])
                    TurnToward( ev.source );
                    res := SendBuyWindow( ev.source, inv_fs, self(), inv_pb );
                    if (!res)
                        print( "SendBuyWindow failed: " + res.errortext );
                    endif
                elseif (ev.text["sell"])
                    TurnToward( ev.source );
                    res := SendSellWindow( ev.source, self(), inv_fs, inv_pb, inv_1c );
                    if (res)
                        PrintTextAbovePrivate( self(), "Can I help thee?", ev.source );
                    else
                        print( "SendSellWindow failed: " + res.errortext );
                    endif
		elseif (ev.text["dye hair"])
			DyeHair(ev.source);
		elseif (ev.text["dye beard"])
			DyeBeard(ev.source);
	        elseif ( ev.text["vendor train"] or ev.text["merchant train"] )
                     TurnToward( ev.source );
                     MerchantTrain( me , ev.source , ev.text );
                //else
                  //   say(process_text(ev.text, "default",3));
                endif

            SYSEVENT_MERCHANT_BOUGHT:
                TurnToward( ev.source );
                PrintTextAbovePrivate( self(), "The total of thy sale is " + ev.amount, ev.source );
                foreach item in EnumerateItemsInContainer( inv_pb )
                    DestroyItem( item );
                endforeach

            SYSEVENT_MERCHANT_SOLD:
                TurnToward( ev.source );
                PrintTextAbovePrivate( self(), "The total of thy purchase is " + ev.amount, ev.source );
                foreach item in EnumerateItemsInContainer( ev.source.backpack )

		hairwhere := splitwords(item.desc);

		if (hairwhere[2]="hair")

		hairtemp := GetEquipmentByLayer(ev.source, 0x0b);
		DestroyItem(hairtemp);
		EquipItem(ev.source, item);
		hairold := GetEquipmentByLayer(ev.source, 0x10);
		if (hairold.color)
		   item.color :=hairold.color;
		endif
		elseif (hairwhere[2]="beard")

		if (ev.source.gender=1)
		destroyitem(item);
		say( "Sorry, only men can wear beards." );
		CreateItemInBackpack(ev.source, UOBJ_GOLD_COIN, 10);
		else
		hairtemp := GetEquipmentByLayer(ev.source, 0x10);
		DestroyItem(hairtemp);
		EquipItem(ev.source, item);
		hairold := GetEquipmentByLayer(ev.source, 0x0b);
		if (hairold.color)
		   item.color :=hairold.color;
		endif
		endif // end of female

		endif

                endforeach

            SYSEVENT_ITEM_GIVEN:
                TrainSkill( me , ev.source , ev.item );

	endcase
 	cleareventque();
    elseif (ReadGameClock() > next_restock)
        RestockInventory( merchant_type, inv_fs );
        next_restock := ReadGameClock() + RESPAWN_MINUTES*60;
    endif
endwhile


function cleareventque()

var ev;
repeat
until (! (ev := os::wait_for_event(0)) );

endfunction

// Used to inform a player if and how much a NPC can train a player
function MerchantTrain( me , who , text )

    var skillcfg := ReadConfigFile( "::skills" ); // Link to the skills cfg file 'pol\config\skills.cfg'
    var elem;             // used to contain the skill structure for the skill in question.
    var i;                // Counter for various operations
    var totaltrain := 0;  // How many skills the player can be trained in <Used as a flag>

    // Get what the player says and divide it into words
    var words := SplitWords( text );

    // The third word is the skill we are looking for
    var skill := words[3];

    // Test to see if it exists, if not then player wants to know what NPC an train them
    if( !skill )
        var trainable := "";
        // For each of the available skills
        for( i := 0 ; i <= MAX_SKILLS ; i := i+1 )
            // acquire the skills attributes.
            elem := FindConfigElem( skillcfg , i );
            // if the NPC has the skill
            if( GetAttribute(me , i) )
                // if the NPC's skill is greater then the PC's
                if ((GetAttribute(me , i)/3) > GetAttribute(who , i))
                  // Add the skill to the string, and increment total train.
                  trainable  := trainable + GetConfigString( elem , "Name" ) + ", ";
                  totaltrain := totaltrain + 1;
                endif
            endif
        endfor

        // If there where skills that the PC can be trained in, list them, else say so.
        if (totaltrain > 0)
          say( "I can train thee in the following skills:" );
          say(trainable);
        else
          say("I cannot train thee.");
        endif
    else
        // The player wishes to train in a skill
        skill := lower(skill);
        // for each of the available skills
        for( i := 0 ; i <= MAX_SKILLS ; i := i+1 )
            // Acquire skill attributes
            elem := FindConfigElem( skillcfg , i );
            // Test to see if this skill is the one the player is referring to.
            if( lower(GetConfigString( elem , "Name" )) = skill )
                // Acquire the NPC's value at this skill.
                var NPC_level := (GetAttribute(me , i) / 3);
                // Test to see if there is a skill value <Redundant check>
                if( NPC_level != 0 )
                    // Get PC's skill
                    var PC_level := GetAttribute( who , i );
                    // if the pc's skill is greater then the NPC's we can do nothing
                    if( PC_level >= NPC_level )
                        say("I cannot teach you anymore.");
                        return;
                    else
                        // Determine the cost for training the PC, and inform the PC of the cost
                        var skillid := i;
                        var trainmaxcost := GoldForSkillGain(NPC_level, PC_level, skillid);
                        say( "I will train thee " + GetConfigString( elem , "Name" ) + " for " + trainmaxcost + " gold.");
                        // Mark the PC with the skill and The cost to train in the skill
                        SetObjProperty( who , "TrainMaxCost" , trainmaxcost );
                        SetObjProperty( who , "TrainSkillID" , skillid );
                        return;
                    endif
                endif
            endif
        endfor

        // All else, The player named an unknown skill.
        say("I know not of that skill.");
     endif
endfunction

// This handles the NPC's training of the PC or the PC's donation of gold to the NPC
// TODO: Reputation bonus if gold donation is greater then a specific amount.
function TrainSkill( me , who , item )

  var skillcfg := ReadConfigFile( "::skills" ); // Link to master skills config file
  var variance := 0;       // The variance between the players skill and the npc's skill
  var NPC_level := 0;      // The NPC's level at the skill
  var PC_level := 0;       // The PC's level at the skill
  var GoldReceived := 0;   // The amount of gold the PC did give us.
  var New_Level := 0;      // The PC's new skill level
  var CurrentNPCCost := 0; // The current NPC's cost for training the Player

  // if the item handed to the NPC was gold and not zero <Integrity check>
  if( (item.objtype = UOBJ_GOLD_COIN) and (item.amount != 0)  )
     // Acquire information on what skill the PC whishes to train in.
     var TrainMaxCost := GetObjProperty( who , "TrainMaxCost" );
     var TrainSkillID := GetObjProperty( who , "TrainSkillID" );

     // If the pc is not expecting training, then it was a donation.
     if( (!TrainMaxCost or !TrainSkillID) and TrainSkillID != 0)
         say( "I don't know what this is for, but thanks!" );
         DestroyItem( item );
         // TODO: Reputation bonus
         // TODO: OSI has a "Desires" property with all npc's.  It's used to determine if an NPC gives out clues to a minor quest.
         return;
     endif

     // If the NPC does have the skill
     if( GetAttribute(me , TrainSkillID) )
          NPC_level    := GetAttribute(me,  TrainSkillID) / 3; // Acquire NPC's training level
          PC_level     := GetAttribute(who, TrainSkillID);     // Acquire PC's  level
          GoldReceived := item.amount;                     // How much gold was received
          variance     := NPC_level - PC_level;            // How many skill points are there between the npc and player.
          CurrentNPCCost := GoldForSkillGain(NPC_level, PC_level, TrainSkillID);

          // Double check to make sure that the pc's skill is lower then the NPC's
          if (PC_level < NPC_level)

            // If what the NPC can train the player is different from what the player is expecting, adjust accordingly.
            if (CurrentNPCCost != TrainMaxCost)

              if (CurrentNPCCost > TrainMaxCost)
                // The current NPC is better then the one we received an offer from.
                NPC_Level := SkillGainForGold(NPC_level, PC_level, TrainSkillID, TrainMaxCost);  // Adjust the NPC's level variable to the lower skill level
                variance  := NPC_level - PC_level;
              else
                // The current NPC is worse then the one we received an offer from.
                // Determine what the cost would be for this NPC
                if (GoldReceived > CurrentNPCCost)
                  // The NPC can't help the player
                  say("I cannot train thee to that level.");
                  MoveItemToContainer( who.backpack , item );
                  return;
                else
                  // The NPC can help, but we need to adjust
                  TrainMaxCost := CurrentNPCCost;
                endif
              endif
            endif

            // Determine what level the player will be trained to
            // if the PC gives the NPC the max cost or more. Train them to the fullest
            if( TrainMaxCost <= GoldReceived )
              New_Level := (NPC_level * 10);
              EraseObjProperty( who , "TrainMaxCost" );  // Clear the trainmaxcost property on the PC.
              EraseObjProperty( who , "TrainSkillID" );  // Clear the skill flag
              // TODO: If the player gives a lot more then the training cost, grant a Reputation Bonus and/or a mini-quest clue.
            else
              // Train the PC to whatever percentage they can afford.
              New_Level := ((PC_level + CInt((CDbl(variance) * (CDbl(GoldReceived) / CDbl(TrainMaxCost))))) * 10);
              SetObjProperty( who , "TrainMaxCost" , TrainMaxCost-GoldReceived );
            endif

            say("Let me show you how it's done.");  // NPC informs player training was successful

            // Set the PC's skill
            SetBaseSkillBaseValue( who , TrainSkillID , BaseSkillToRawSkill(New_Level));

            DestroyItem( item );  // Destroy gold

            SendSysmessage( who , "Your skill increases." ); // Note increase

          else
            // PC just paid NPC to be trained but NPC doesn't have the skill.
            say("I'm not as good as thee.  Please find another to train thee.");
            MoveItemToContainer( who.backpack , item );
          endif
      else
          // NPC does not have that skill to train the PC.  Return gold
          Say("I don't know that skill. Why don't you ask me what i can train you in?");
          MoveItemToContainer( who.backpack , item );
      endif
  else
     // PC gave NPC something else other then gold.  Return it.
     say("Bah, I have no use for this. Be off with ye.");
     MoveItemToContainer( who.backpack , item );
     // TODO: OSI has a "Desires" property with all npc's.  I think it's used to determine if an NPC
     //  gives out clues to a minor quest or reputation bonus, depending on the item donated <Type and value>
  endif

endfunction

// Used to determine cost for raising the pc's skill to the level of the NPC.
// Note: This function is designed to handle different skills have different rates at different levels, etc.
function GoldForSkillGain( NPC_Skill, PC_Skill, skillid )
  var maxskill := NPC_Skill - PC_Skill;
  return maxskill*10; // Cost equals ten times the difference.
endfunction

// Used to determine what the skill level of the PC will be for the amount of gold they gave
// Note: This function is designed to handle different skills have different rates at different levels, etc.
function SkillGainForGold(NPC_level, PC_level, TrainSkillID, GoldReceived)
  return (GoldReceived/10) + PC_Level;
endfunction

function DyeHair(player)
	foreach item in EnumerateItemsInContainer( player.backpack )
		item.movable := 0;
	endforeach
	var cash := 0;
	var diff := 0;
	var cost := GetObjProperty(me, "DyeHairCost");
	var goldarray := {};
	var num := 0;
	var count := 0;
	foreach item in EnumerateItemsInContainer( player.backpack )
		if (item.objtype = 0xeed) 
			if (cash < cost)
				num := num + 1;
				cash := cash + item.amount;
				goldarray[num] := item;
			endif
		endif
	endforeach
	if (cash < cost)
		PrintTextAbovePrivate( self(), "You don't have enough gold!", player );
		foreach item in EnumerateItemsInContainer( player.backpack )
			item.movable := 1;
		endforeach
		return;
	endif
	while (count <= num)
		DestroyItem(goldarray[count]);
		count := count + 1;
	endwhile
	var thing;
	if (cash > cost)
		diff := cash - cost;
		CreateItemInBackpack( player, 0xeed, diff);
		thing.movable := 0;
	endif
	SetObjProperty(player,"dyecost",cost);
	start_script(":zuluitems:gmhairdye", player);
endfunction
function DyeBeard(player)
	foreach item in EnumerateItemsInContainer( player.backpack )
		item.movable := 0;
	endforeach
	var cash := 0;
	var diff := 0;
	var cost := GetObjProperty(me, "DyeBeardCost");
	var goldarray := {};
	var num := 0;
	var count := 0;
	foreach item in EnumerateItemsInContainer( player.backpack )
		if (item.objtype = 0xeed) 
			if (cash < cost)
				num := num + 1;
				cash := cash + item.amount;
				goldarray[num] := item;
			endif
		endif
	endforeach
	if (cash < cost)
		PrintTextAbovePrivate( self(), "You don't have enough gold!", player );
		foreach item in EnumerateItemsInContainer( player.backpack )
			item.movable := 1;
		endforeach
		return;
	endif
	while (count <= num)
		DestroyItem(goldarray[count]);
		count := count + 1;
	endwhile
	var thing;
	if (cash > cost)
		diff := cash - cost;
		thing := CreateItemInBackpack( player, 0xeed, diff);
		thing.movable := 0;
	endif
	SetObjProperty(player,"dyecost",cost);
	start_script(":zuluitems:gmbearddye", player);
endfunction