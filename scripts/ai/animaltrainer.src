////////////////////////////////////////////////////////////////////////////
//
//  MERCHANT.SRC - Control script for NPC Merchants
//
//  A Merchant NPC must have two object property strings:
//      MerchantType      A MerchantType found in MRCSPAWN.CFG
//
//  "[MerchantSerial] FS" is the merchant's "for sale" inventory.  This is
//                      restocked periodically by MRCSPAWN.SRC
//  "[MerchantSerial] PB" contains items bought from players, now for-sale.
//              (this doesn't work yet)
//
// Updated by: Sentack - 1/14/2000
//   Purpose: Edited 'vendor train' in the following ways
//      NPC lists only the skills they can train PC
//      NPC now train a PC up to 1/3rd their skill level
//      Note that only paying an NPC part of the money isn't perfect yet.
//      NPC returns gold if they can't train PC
//      Test to make sure PC will be trained to the proper level for their
//       gold
//      Added GoldForSkillGain for future updates of skill training costs
//
// Upated by: Zulu (zulu@cadvision.com) March 31/2000
//
// added buy and sell routine
// includes Stable Keeper script by RoTTer (daros@cebinet.com.br)
// i have updated the stable keeper script
// add new commands from the latest pol 087
//
// Sno (toodles@yifan.net) - added bugfix Jan 13 2003, for duping when
//   loading tickets. Makes the ticket non-movable.
//
////////////////////////////////////////////////////////////////////////////

use npc;
use basic;
use os;
use uo;

include "include/eventid";
include "include/attributes";
include "include/randname";
include "include/utility";
include "include/mrcspawn";
include "include/speech";
include "include/client";
include "include/vetement";
include "ai/setup/modsetup";
include "include/random";
include "include/objtype";

const RESPAWN_MINUTES := 30;     // In how many minutes will the NPC respawn if killed.
const MAX_SKILLS      := 48;     // There are currently 48 Skills.
const REACT_THRESHOLD := 2;

set_priority( 50 );

var buyimage  := {0x211b, 0x211c, 0x2121, 0x2124, 0x211f, 0x2120, 0x2126, 0x20f6, 0x211a, 0x2123, 0x2125, 0x2122, 0x211e, 0x211d, 0x2119, 0x20e6, 0x2108, 0x2103, 0x2101, 0x2135, 0x2136, 0x2137, 0x2127};

var sellimage := {0xc9, 0xd9, 0xcc, 0xc8, 0xe2, 0xe4, 0x123, 0xdc, 0x06, 0xee, 0xcd, 0xe1, 0xd4, 0x05, 0xd6, 0xcf, 0xd1, 0xd8, 0xcb, 0xd2, 0xda, 0xdb, 0x124};

var pettemplate :={"cat", "dog", "horse", "horse2", "horse3", "horse4", "packhorse", "llama", "bird", "rat", "rabbit", "wolf", "grizzly", "eagle", "panther", "sheep", "goat", "cow", "pig", "desertostard", "frenziedostard", "forestostard", "packllama"};

var storage, inv_fs, inv_pb, inv_1c;
var merchant_type := "AnimalTrainer";
var me := Self();

if( me.name["<random>"] )
case( Random(2) )
0: me.graphic := 400; me.gender := 0;
1: me.graphic := 401; me.gender := 1;
endcase
SetName( me, RandomName( me ) + " the Animal Trainer");
Habille( me, "AnimalTrainer" );
endif

storage := FindStorageArea( "Merchant Storage" );

if (!storage)
    exit;
endif

inv_fs := find_or_create_item( storage, me.serial + " FS", UOBJ_METALCHEST );
inv_pb := find_or_create_item( storage, me.serial + " PB", UOBJ_METALCHEST );
inv_1c := find_or_create_item( storage, me.serial + " 1C", UOBJ_METALCHEST );

if (!inv_fs || !inv_pb || !inv_1c)
    exit;
endif

RestockInventory( merchant_type, inv_fs );
var next_restock := ReadGameClock() + RESPAWN_MINUTES*60;

EnableEvents( SYSEVENT_ITEM_GIVEN );
EnableEvents( SYSEVENT_SPEECH, REACT_THRESHOLD );

while (1)

    var ev, petname, newpet, i;

    ev := os::wait_for_event( 30 );
    if (ev)

        case (ev.type)
            SYSEVENT_SPEECH:
                say(process_text(ev.text, "default",38));
                if (ev.text["buy"])
                    TurnToward( ev.source );
                    SetObjProperty(ev.source, "#buy", 1);
                    var res := SendBuyWindow( ev.source, inv_fs, Self(), inv_pb );
                    EraseObjProperty(ev.source, "#buy");
                    if (!res)
                        print( "SendBuyWindow failed: " + res.errortext );
                    endif
                elseif (ev.text["sell"])
                    TurnToward( ev.source );
                    if (GetObjProperty(ev.source, "#buy")==1)
                    say( "You can't sell while buying." );
                    else
		    sellanimal( ev.source );
		    endif
                elseif ( ev.text["vendor train"] || ev.text["merchant train"] )
                     TurnToward( ev.source );
                     MerchantTrain( me, ev.source, ev.text );

		elseif (ev.text["stable"])
		     TurnToward(ev.source);
		     stable(ev.source);
                endif

            SYSEVENT_MERCHANT_BOUGHT:
                TurnToward( ev.source );
                PrintTextAbovePrivate( Self(), "The total of thy sale is " + ev.amount, ev.source );
                foreach item in EnumerateItemsInContainer( inv_pb )
                    DestroyItem( item );
                endforeach

            SYSEVENT_MERCHANT_SOLD:
                TurnToward( ev.source );
                PrintTextAbovePrivate( Self(), "The total of thy purchase is " + ev.amount, ev.source );
		set_priority(1);

                foreach item in EnumerateItemsInContainer( ev.source.backpack )
		petname := item.objtype;

		if ((petname<=0x2137) && (petname>=0x20cf))

		if ((petname==0x20cf) && (item.color==0x02e6))
			   petname :="blackbear";

		elseif (petname==0x2118)
			   petname :="bear";
		else
		for(i:=1;i<=buyimage.size();i:=i+1)
			if (petname==buyimage[i])
			   petname :=pettemplate[i];
			   break;
			endif
		endfor
		endif

		newpet := CreateNpcFromTemplate(petname, ev.source.x, ev.source.y,ev.source.z);

		DestroyItem( item );
                SetObjProperty(newpet, "master", ev.source.serial);
                SetObjProperty(newpet, "prevtamed", 1);
		newpet.script := "tamed";
                RestartScript(newpet);
		endif

                endforeach
		set_priority( 50 );

            SYSEVENT_ITEM_GIVEN:
	        if (ev.item.objtype==UOBJ_GOLD_COIN);
                TrainSkill( me, ev.source, ev.item );
		else
			TurnToward(ev.source);
			Load_Ticket_Data(me, ev.source, ev.item);
		endif

	endcase
	 cleareventque();
    elseif (ReadGameClock() > next_restock)
        RestockInventory( merchant_type, inv_fs );
        next_restock := ReadGameClock() + RESPAWN_MINUTES*60;
    endif
endwhile

function cleareventque()

var ev;
repeat
until (! (ev := os::wait_for_event(0)) );

endfunction

// Used to inform a player if and how much a NPC can train a player
function MerchantTrain( me, who, text )

    var skillcfg := ReadConfigFile( "::skills" ); // Link to the skills cfg file 'pol\config\skills.cfg'
    var elem;             // used to contain the skill structure for the skill in question.
    var i;                // Counter for various operations
    var totaltrain := 0;  // How many skills the player can be trained in <Used as a flag>

    // Get what the player says and divide it into words
    var words := SplitWords( text );

    // The third word is the skill we are looking for
    var skill := words[3];

    // Test to see if it exists, if not then player wants to know what NPC an train them
    if( !skill )
        var trainable := "";
        // For each of the available skills
        for( i := 0; i <= MAX_SKILLS; i := i+1 )
            // acquire the skills attributes.
            elem := FindConfigElem( skillcfg, i );
            // if the NPC has the skill
            if( GetEffectiveSkill(me, i) )
                // if the NPC's skill is greater then the PC's
                if ((GetEffectiveSkill(me, i)/3) > GetEffectiveSkill(who, i))
                  // Add the skill to the string, and increment total train.
                  trainable  := trainable + GetConfigString( elem, "Name" ) + ", ";
                  totaltrain := totaltrain + 1;
                endif
            endif
        endfor

        // If there where skills that the PC can be trained in, list them, else say so.
        if (totaltrain > 0)
          say( "I can train thee in the following skills:" );
          say(trainable);
        else
          say("I cannot train thee.");
        endif
    else
        // The player wishes to train in a skill
        skill := lower(skill);
        // for each of the available skills
        for( i := 0; i <= MAX_SKILLS; i := i+1 )
            // Acquire skill attributes
            elem := FindConfigElem( skillcfg, i );
            // Test to see if this skill is the one the player is referring to.
            if( lower(GetConfigString( elem, "Name" )) == skill )
                // Acquire the NPC's value at this skill.
                var npc_level := (GetEffectiveSkill(me, i) / 3);
                // Test to see if there is a skill value <Redundant check>
                if( npc_level != 0 )
                    // Get PC's skill
                    var pc_level := GetEffectiveSkill( who, i );
                    // if the pc's skill is greater then the NPC's we can do nothing
                    if( pc_level >= npc_level )
                        say("I cannot teach you anymore.");
                        return;
                    else
                        // Determine the cost for training the PC, and inform the PC of the cost
                        var skillid := i;
                        var trainmaxcost := GoldForSkillGain(npc_level, pc_level, skillid);
                        say( "I will train thee " + GetConfigString( elem, "Name" ) + " for " + trainmaxcost + " gold.");
                        // Mark the PC with the skill and The cost to train in the skill
                        SetObjProperty( who, "TrainMaxCost", trainmaxcost );
                        SetObjProperty( who, "TrainSkillID", skillid );
                        return;
                    endif
                endif
            endif
        endfor

        // All else, The player named an unknown skill.
        say("I know not of that skill.");
     endif
endfunction

// This handles the NPC's training of the PC or the PC's donation of gold to the NPC
// TODO: Reputation bonus if gold donation is greater then a specific amount.
function TrainSkill( me, who, item )

  var skillcfg := ReadConfigFile( "::skills" ); // Link to master skills config file
  var variance := 0;       // The variance between the players skill and the npc's skill
  var npc_level := 0;      // The NPC's level at the skill
  var pc_level := 0;       // The PC's level at the skill
  var goldreceived := 0;   // The amount of gold the PC did give us.
  var new_level := 0;      // The PC's new skill level
  var currentnpccost := 0; // The current NPC's cost for training the Player

  // if the item handed to the NPC was gold and not zero <Integrity check>
  if( (item.objtype == UOBJ_GOLD_COIN) && (item.amount != 0)  )
     // Acquire information on what skill the PC whishes to train in.
     var trainmaxcost := GetObjProperty( who, "TrainMaxCost" );
     var trainskillid := GetObjProperty( who, "TrainSkillID" );

     // If the pc is not expecting training, then it was a donation.
     if( (!trainmaxcost || !trainskillid) && trainskillid != 0)
         say( "I don't know what this is for, but thanks!" );
         DestroyItem( item );
         // TODO: Reputation bonus
         // TODO: OSI has a "Desires" property with all npc's.  It's used to determine if an NPC gives out clues to a minor quest.
         return;
     endif

     // If the NPC does have the skill
     if( GetEffectiveSkill(me, trainskillid) )
          npc_level    := GetEffectiveSkill(me,  trainskillid) / 3; // Acquire NPC's training level
          pc_level     := GetEffectiveSkill(who, trainskillid);     // Acquire PC's  level
          goldreceived := item.amount;                     // How much gold was received
          variance     := npc_level - pc_level;            // How many skill points are there between the npc and player.
          currentnpccost := GoldForSkillGain(npc_level, pc_level, trainskillid);

          // Double check to make sure that the pc's skill is lower then the NPC's
          if (pc_level < npc_level)

            // If what the NPC can train the player is different from what the player is expecting, adjust accordingly.
            if (currentnpccost != trainmaxcost)

              if (currentnpccost > trainmaxcost)
                // The current NPC is better then the one we received an offer from.
                npc_level := SkillGainForGold(npc_level, pc_level, trainskillid, trainmaxcost);  // Adjust the NPC's level variable to the lower skill level
                variance  := npc_level - pc_level;
              else
                // The current NPC is worse then the one we received an offer from.
                // Determine what the cost would be for this NPC
                if (goldreceived > currentnpccost)
                  // The NPC can't help the player
                  say("I cannot train thee to that level.");
                  MoveItemToContainer( who.backpack, item );
                  return;
                else
                  // The NPC can help, but we need to adjust
                  trainmaxcost := currentnpccost;
                endif
              endif
            endif

            // Determine what level the player will be trained to
            // if the PC gives the NPC the max cost or more. Train them to the fullest
            if( trainmaxcost <= goldreceived )
              new_level := (npc_level * 10);
              EraseObjProperty( who, "TrainMaxCost" );  // Clear the trainmaxcost property on the PC.
              EraseObjProperty( who, "TrainSkillID" );  // Clear the skill flag
              // TODO: If the player gives a lot more then the training cost, grant a Reputation Bonus and/or a mini-quest clue.
            else
              // Train the PC to whatever percentage they can afford.
              new_level := ((pc_level + CInt((CDbl(variance) * (CDbl(goldreceived) / CDbl(trainmaxcost))))) * 10);
              SetObjProperty( who, "TrainMaxCost", trainmaxcost-goldreceived );
            endif

            say("Let me show you how it's done.");  // NPC informs player training was successful

            // Set the PC's skill
            SetBaseSkillBaseValue( who, trainskillid, new_level);

            DestroyItem( item );  // Destroy gold

            SendSysMessage( who, "Your skill increases." ); // Note increase

          else
            // PC just paid NPC to be trained but NPC doesn't have the skill.
            say("I'm not as good as thee.  Please find another to train thee.");
            MoveItemToContainer( who.backpack, item );
          endif
      else
          // NPC does not have that skill to train the PC.  Return gold
          say("I don't know that skill. Why don't you ask me what i can train you in?");
          MoveItemToContainer( who.backpack, item );
      endif
  else
     // PC gave NPC something else other then gold.  Return it.
     say("Bah, I have no use for this. Be off with ye.");
     MoveItemToContainer( who.backpack, item );
     // TODO: OSI has a "Desires" property with all npc's.  I think it's used to determine if an NPC
     //  gives out clues to a minor quest or reputation bonus, depending on the item donated <Type and value>
  endif

endfunction

// Used to determine cost for raising the pc's skill to the level of the NPC.
// Note: This function is designed to handle different skills have different rates at different levels, etc.
function GoldForSkillGain( npc_skill, pc_skill, skillid )
  var maxskill := npc_skill - pc_skill;
  return maxskill*10; // Cost equals ten times the difference.
endfunction

// Used to determine what the skill level of the PC will be for the amount of gold they gave
// Note: This function is designed to handle different skills have different rates at different levels, etc.
function SkillGainForGold(npc_level, pc_level, trainskillid, goldreceived)
  return (goldreceived/10) + pc_level;
endfunction

function sellanimal(who)

	var i;

	say("What pet would you like to sell?");

	var pet := Target(who);

	if ((!pet) || (pet==""))
		SendSysMessage(who, "canceled.");
		return;
	endif

	   var tempdata	:= GetObjProperty(pet, "master");
	   var summoned	:= GetObjProperty(pet, "summoned");
	   var animated	:= GetObjProperty(pet, "animated");
	   var charmed	:= GetObjProperty(pet, "charmed");

	   if (!tempdata)
		say("I cannot buy that.");
		return;
	   endif

	   if ((pet.script == "tamed") && (tempdata == who.serial) && !summoned && !animated && !charmed)

		if ((pet.objtype==0xd3) && (pet.color==0x02e6))
			   CreateItemInContainer(inv_fs, 0x20cf, 1);

		elseif (pet.objtype==0xd3)
			   CreateItemInContainer(inv_fs, 0x2118, 1);
		else
		for(i:=1;i<=sellimage.size();i:=i+1)
			if (pet.objtype==sellimage[i])
			   CreateItemInContainer(inv_fs, buyimage[i], 1);
			   break;
			endif
		endfor
		endif

	        // var buyamount := pet.strength*2;
		var buyamount := GetStrength(pet);

		say(pet.name + " is worth " + buyamount);
		SetObjProperty(pet, "guardkill", 1);
		pet.graphic := 1000;
		Damage(pet, GetHp(pet));

		CreateItemInBackpack(who, UOBJ_GOLD_COIN, buyamount);
		return;

	   elseif ( (pet.graphic == CID_HUMAN_MALE) || (pet.graphic == CID_HUMAN_FEMALE) )
		say("Do I look like an Inn Keeper?!");
	   else
		say("You could sell " + pet.name + " but that is not your pet.");
           endif

endfunction

function Load_Ticket_Data(me, who, ticket)

        var tempdata := 0;
        var newpet := 0;

        if ((ticket.objtype == 0x186e) && (ticket.graphic == 5360))
		    ticket.movable := 0; // Make sure the owner of the ticket doesn't move the ticket,
                                     // otherwise they can dupe by holding it.

                tempdata := GetObjProperty(ticket, "petname");
                say("I will get " + tempdata + " for you. One moment, please.");
                sleep(1);

                tempdata := GetObjProperty(ticket, "pettemplate");
                newpet := CreateNpcFromTemplate(tempdata, me.x, me.y, me.z);

                tempdata := GetObjProperty(ticket, "petname");
                newpet.name := tempdata;

                tempdata := GetObjProperty(ticket, "pethp");
                SetHp(newpet, tempdata);

                tempdata := GetObjProperty(ticket, "petmana");
                SetMana(newpet, tempdata);

                tempdata := GetObjProperty(ticket, "petcolor");
                newpet.color := tempdata;

                SetObjProperty(newpet, "master", who.serial);
                SetObjProperty(newpet, "prevtamed", 1);
		SetObjProperty(newpet, "tametime", ReadGameClock() );
                newpet.script := "tamed";
                RestartScript(newpet);

                say("Take care and be sure to feed it!");

                DestroyItem(ticket);
        else
                say("I have no use for that.");
        endif

endfunction

function stable(who)
	say("Which pet would you like to Stable");

	var pet := Target(who);

	if (pet)
	   var tempdata	:= GetObjProperty(pet, "master");
	   var summoned	:= GetObjProperty(pet, "summoned");
	   var animated	:= GetObjProperty(pet, "animated");
	   var charmed	:= GetObjProperty(pet, "charmed");

	   if ((pet.script == "tamed") && (tempdata == who.serial) && !summoned && !animated && !charmed)
		var price := GetStrength(pet)*2;
		say("I charge " + price + " to take care of " + pet.name + ".");

	   if (who.spendgold(price))
		say("Keep this ticket and give it to me when you want " + pet.name + " back.");
		var ticket := CreateItemInBackpack(who, 0x186e, 1);

		Save_Pet_Data(ticket, pet);
	   endif

	   elseif ((pet.graphic == CID_HUMAN_MALE) || (pet.graphic == CID_HUMAN_FEMALE))
		say("Do I look like an Inn Keeper?!");
	   else
		say("I could stable " + pet.name + " but that is not your pet.");
	   endif

        endif
endfunction

function Save_Pet_Data(ticket, pet)

        var tempdata:= pet.npctemplate;

        ticket.name := "Pet claim ticket - Name: " + pet.name + " - " + tempdata;
        ticket.graphic := 5360;

        SetObjProperty(ticket, "petname", pet.name);
        SetObjProperty(ticket, "pethp", GetHp(pet));
        SetObjProperty(ticket, "petmana", GetMana(pet));
        SetObjProperty(ticket, "petcolor", pet.color);

        SetObjProperty(ticket, "pettemplate", tempdata);

        SetObjProperty(pet, "guardkill", 1);
        pet.graphic := 1000;
        Damage(pet, GetHp(pet));

endfunction