use uo;
use os;

include "include/canAccess";
include "include/client";
include "include/objtype";

program on_insert(who, book, movetype, inserttype, item)
  var vendorserial := GetObjProperty(book, "Vendor");
  if (vendorserial)
    MoveItemToContainer(item, who.backpack);
    SendSysMessage(who, "You can not insert runes while that is on a vendor.");
    return;
  endif
  if (book.movable == 0)
    MoveItemToContainer(item, who.backpack);
    SendSysMessage(who, "You can't do that while the book is locked down.");
    return;
  endif

  // Don't eat the rune/scroll if you can't access the runebook!
  if (!can_access(who, book) || !can_access(who, item))
    MoveItemToContainer(item, who.backpack);
    SendSysMessage(who, "You can't add that when the book is in use.");
    return;
  endif

  if (item.objtype == 0x1f14)
    AddRuneToRunebook( who, book, item );
  elseif (item.objtype == 0x1f4c);
    RechargeBook( who, book, item );
  else
    MoveItemToContainer(item, who.backpack);
    SendSysMessage(who, "You can't put that in a runebook.");
  endif
endprogram

function AddRuneToRunebook( who, runebook, rune )
               	set_critical(1);

        if (!GetObjProperty(rune, "x"))
         MoveItemToContainer(rune, who.backpack);
         SendSysMessage(who, "You can only insert marked runes in your book.");
         return;
        endif
        
	if( !ReserveItem( rune ) )
		set_critical(0);
		return 0;
	endif
	
	var runes_def	 := GetObjProperty( runebook, "RuneDefs" );
	if( !runes_def )
		runes_def := array;
	endif
	
	if( runes_def.size() >= 16 )
		set_critical(0);
		return 0;
	endif
	
	var tox := Cint(GetObjProperty( rune, "x" ));
	var toy := Cint(GetObjProperty( rune, "y" ));
	var toz := Cint(GetObjProperty( rune, "z" ));
	if( !tox and !toy and !toz )
		set_critical(0);
		return 0;
  	endif

	var name := rune.name - "A recall rune for ";
	if( !name )
		name := "a marked recall rune";
	endif
			
	var rune_data		:= struct;
	rune_data.+tox		:= tox;
	rune_data.+toy		:= toy;
	rune_data.+toz		:= toz;
	rune_data.+name		:= name;
	rune_data.+defloc	:= 0;
	rune_data.+dtindex	:= 5;
	
	if( !runes_def.append(rune_data) )
		set_critical(0);
		return 0;
	endif
	
	if( !SetObjProperty( runebook, "RuneDefs", runes_def ) )
		set_critical(0);
		return 0;
	endif
	
	DestroyItem( rune );
	SendSysMessage( who, "You insert the rune into your runebook." );

	set_critical(0);
	
	return 1;
	
endfunction

function RechargeBook( who, runebook, scrolls )

	set_critical(1);
	
	var charges	 := Cint( GetObjProperty( runebook, "charges" ) );
	var maxcharges := Cint( GetObjProperty( runebook, "maxcharges" ) );
	if( !maxcharges )
		maxcharges := 5;
	endif
	
	var maxamount	 := Cint( maxcharges - charges );
	var amount	 := Cint( scrolls.amount );
	
	if( maxamount <= 0 )
                MoveItemToContainer(scrolls, who.backpack);
                SendSysMessage( who, "This runebook is full." );
                set_critical(0);
		return 0;
		
	elseif( amount >= maxamount )
		var to_substract := maxamount;
		if( SubtractAmount( scrolls, to_substract ) )
			charges := maxcharges;
		endif
		
	elseif( DestroyItem( scrolls ) )
		charges := charges + amount;
	endif
	
	if( scrolls and scrolls.amount )
		MoveItemToContainer( scrolls, who.backpack );
	endif

	PlaySoundEffect( who, 0x1f1);
	PlayObjectCenteredEffect( who , FX_SPARK_EFFECT , 7 , 0x10 );
	SetObjProperty( runebook, "charges", charges );
	SendSysMessage( who, "There's now " + charges + " charges in this runebook." );
	
	UpdateName( runebook, charges );
	
	set_critical(0);
	return 1;
	
endfunction

function UpdateName(runebook, charges)
  var name := GetObjProperty(runebook, "name");
  if (!name)
    name := "Runebook";
  endif
  runebook.name := name + " [charges: " + charges + "]";
endfunction
