use uo;
use os;
use math;
use basic;
use cfgfile;


include "include/gumps";
include "customspells";
include "propids";
include "cfgfiles";
include "layers";
include "classes";

const RENAME_BOOK		:= 0x01;
const RECALL_WITH_CHARGES	:= 0x10;
const RECALL_WITHOUT_CHARGES	:= 0x20;
const GATE_WITHOUT_CHARGES	:= 0x30;
const SET_DEFAULT_LOCATION	:= 0x40;
const RESET_DEFAULT_LOCATION	:= 0x50;
const DROP_RUNE			:= 0x60;
const UOBJ_RUNE := 0x1f14;
const SPELLID_GATE_TRAVEL		:= 52;
const SFX_SPELL_FIZZLE		:= 0x05d;	// Fizzling a spell SFX
const FX_SPELL_FIZZLE		:= 0x3735; 	// Fizzle a spell FX
const MOVING_SPELL_FIZZLE	:= 0;
const SPEED_SPELL_FIZZLE	:= 7;		// Speed for fizzling effect
const LOOP_SPELL_FIZZLE		:= 7;	
const SFX_SPELL_GATE_TRAVEL     := 0x020f;
const UOBJ_BLUE_MOONGATE    := 0x0F6C;
const SPELLID_RECALL		:= 32;
const SFX_SPELL_RECALL1  	:= 0x0210;
const SFX_SPELL_RECALL2		:= 0x01fd;
const SFX_SPELL_RECALL		:= 0x01fd;
// time to wait for house events before checking for banned people inside
const EVENT_TIMEOUT := 20;

// reload list of bans and owners every CACHE_RELOAD times the script cycles (EVENT_TIMEOUT seconds)
const CACHE_RELOAD := 6;

// maximum number of co-owners of the house
const MAX_CO_OWNERS := 5;

// maximum number of friends of the house
const MAX_FRIENDS := 20;

// maximum number of friends of the house
const MAX_BANNED := 20;

// if set to 1 the house can decay over time
const DECAY := 0;
const ERROR_MSG_ANTI_MAGIC_AREA		:= "Spells cannot be cast here.";
const ERROR_MSG_FIZZLE			:= "The spell fizzles";
const ERROR_MSG_INTERRUPTED		:= "You were interrupted during the casting";
const ERROR_MSG_LOST_CONCENTRATION	:= "You've lost your concentration!";
const ERROR_MSG_NOT_ENOUGH_REAGENTS	:= "Insufficient Reagents.";
const ERROR_MSG_NOT_ENOUGH_MANA		:= "Insufficient Mana.";
const ERROR_MSG_NOT_ENOUGH_SKILL	:= "This spell is above yours magical capacities.";
const ERROR_MSG_NOT_IN_SIGHT		:= "You can't see that.";
const ERROR_MSG_WRONG_EQUIPMENT		:= "Your hands must be free to cast spells.";



const SKILLID_MAGERY		:= 25;	


program open_runebook( who, runebook )

	SetScriptController(who);

	if( !Accessible( who, runebook ) )
		SendSysMessage( who , "You can't reach that." );
		return 0;
	endif

	if( !ReserveItem( runebook ) )
		return 0;
	endif

	if(who.hidden)
		SendSysMessage(who, "You cannot recall while hidden");
		return;
	endif

	var x;
	var y;
	var msg;
	var ret;
	var info;
	var name;
	var type;
	var index;
	var rune_count;
	var page_count;
	var defloc	 := 0;
	var charges	 := Cint( GetObjProperty( runebook, "charges" ) );
	var maxcharges := Cint( GetObjProperty( runebook, "maxcharges" ) );
	if( !maxcharges )
		maxcharges := 5;
	endif

	var runes_def	 := GetObjProperty( runebook, "RuneDefs" );
	if( !runes_def )
		runes_def := array;
	endif

	var max_page	 := Cint( (runes_def.size()+1) / 2 );

	var layout := { "page 0",
			  "nodispose",
			  "gumppic 30   5 " + Cint(G_BOOK_SMALL_1),
			  "gumppic 55  45 " + Cint(G_DECO_LINE_LEFT),
			  "gumppic 75  45 " + Cint(G_DECO_LINE_CENTER),
			  "gumppic 90  45 " + Cint(G_DECO_LINE_CENTER),
			  "gumppic 105 45 " + Cint(G_DECO_LINE_CENTER),
			  "gumppic 120 45 " + Cint(G_DECO_LINE_CENTER),
			  "gumppic 135 45 " + Cint(G_DECO_LINE_CENTER),
			  "gumppic 150 45 " + Cint(G_DECO_LINE_CENTER),
			  "gumppic 165 45 " + Cint(G_DECO_LINE_RIGHT),
			  "gumppic 218 45 " + Cint(G_DECO_LINE_LEFT),
			  "gumppic 233 45 " + Cint(G_DECO_LINE_CENTER),
			  "gumppic 248 45 " + Cint(G_DECO_LINE_CENTER),
			  "gumppic 263 45 " + Cint(G_DECO_LINE_CENTER),
			  "gumppic 278 45 " + Cint(G_DECO_LINE_CENTER),
			  "gumppic 293 45 " + Cint(G_DECO_LINE_CENTER),
			  "gumppic 308 45 " + Cint(G_DECO_LINE_CENTER),
			  "gumppic 323 45 " + Cint(G_DECO_LINE_RIGHT),

			  "text 90  35 0 0",
			  "text 228 35 0 1"};


	var data := { "Charges: " + charges,		// 0 Charges
			"Max Charges:" + maxcharges,	// 1 Max Charges
			"Rename Book",			// 2 Rename Book
			"Set default",			// 3 Set default
			"Drop rune" };			// 4 Drop rune


	case( max_page )
		0:	break;

		1:	layout.append( "button 60  182 " + Cint(G_SPELLCIRCLE_1) + " " + Cint(G_SPELLCIRCLE_1) + " 0 2" );

		2:	layout.append( "button 60  182 " + Cint(G_SPELLCIRCLE_1) + " " + Cint(G_SPELLCIRCLE_1) + " 0 2" );
			layout.append( "button 95  182 " + Cint(G_SPELLCIRCLE_2) + " " + Cint(G_SPELLCIRCLE_2) + " 0 3" );

		3:	layout.append( "button 60  182 " + Cint(G_SPELLCIRCLE_1) + " " + Cint(G_SPELLCIRCLE_1) + " 0 2" );
			layout.append( "button 95  182 " + Cint(G_SPELLCIRCLE_2) + " " + Cint(G_SPELLCIRCLE_2) + " 0 3" );
			layout.append( "button 130 182 " + Cint(G_SPELLCIRCLE_3) + " " + Cint(G_SPELLCIRCLE_3) + " 0 4" );

		4:	layout.append( "button 60  182 " + Cint(G_SPELLCIRCLE_1) + " " + Cint(G_SPELLCIRCLE_1) + " 0 2" );
			layout.append( "button 95  182 " + Cint(G_SPELLCIRCLE_2) + " " + Cint(G_SPELLCIRCLE_2) + " 0 3" );
			layout.append( "button 130 182 " + Cint(G_SPELLCIRCLE_3) + " " + Cint(G_SPELLCIRCLE_3) + " 0 4" );
			layout.append( "button 165 182 " + Cint(G_SPELLCIRCLE_4) + " " + Cint(G_SPELLCIRCLE_4) + " 0 5" );

		5:	layout.append( "button 60  182 " + Cint(G_SPELLCIRCLE_1) + " " + Cint(G_SPELLCIRCLE_1) + " 0 2" );
			layout.append( "button 95  182 " + Cint(G_SPELLCIRCLE_2) + " " + Cint(G_SPELLCIRCLE_2) + " 0 3" );
			layout.append( "button 130 182 " + Cint(G_SPELLCIRCLE_3) + " " + Cint(G_SPELLCIRCLE_3) + " 0 4" );
			layout.append( "button 165 182 " + Cint(G_SPELLCIRCLE_4) + " " + Cint(G_SPELLCIRCLE_4) + " 0 5" );
			layout.append( "button 230 182 " + Cint(G_SPELLCIRCLE_5) + " " + Cint(G_SPELLCIRCLE_5) + " 0 6" );

		6:	layout.append( "button 60  182 " + Cint(G_SPELLCIRCLE_1) + " " + Cint(G_SPELLCIRCLE_1) + " 0 2" );
			layout.append( "button 95  182 " + Cint(G_SPELLCIRCLE_2) + " " + Cint(G_SPELLCIRCLE_2) + " 0 3" );
			layout.append( "button 130 182 " + Cint(G_SPELLCIRCLE_3) + " " + Cint(G_SPELLCIRCLE_3) + " 0 4" );
			layout.append( "button 165 182 " + Cint(G_SPELLCIRCLE_4) + " " + Cint(G_SPELLCIRCLE_4) + " 0 5" );
			layout.append( "button 230 182 " + Cint(G_SPELLCIRCLE_5) + " " + Cint(G_SPELLCIRCLE_5) + " 0 6" );
			layout.append( "button 265 182 " + Cint(G_SPELLCIRCLE_6) + " " + Cint(G_SPELLCIRCLE_6) + " 0 7" );

		7:	layout.append( "button 60  182 " + Cint(G_SPELLCIRCLE_1) + " " + Cint(G_SPELLCIRCLE_1) + " 0 2" );
			layout.append( "button 95  182 " + Cint(G_SPELLCIRCLE_2) + " " + Cint(G_SPELLCIRCLE_2) + " 0 3" );
			layout.append( "button 130 182 " + Cint(G_SPELLCIRCLE_3) + " " + Cint(G_SPELLCIRCLE_3) + " 0 4" );
			layout.append( "button 165 182 " + Cint(G_SPELLCIRCLE_4) + " " + Cint(G_SPELLCIRCLE_4) + " 0 5" );
			layout.append( "button 230 182 " + Cint(G_SPELLCIRCLE_5) + " " + Cint(G_SPELLCIRCLE_5) + " 0 6" );
			layout.append( "button 265 182 " + Cint(G_SPELLCIRCLE_6) + " " + Cint(G_SPELLCIRCLE_6) + " 0 7" );
			layout.append( "button 300 182 " + Cint(G_SPELLCIRCLE_7) + " " + Cint(G_SPELLCIRCLE_7) + " 0 8" );

		8:	layout.append( "button 60  182 " + Cint(G_SPELLCIRCLE_1) + " " + Cint(G_SPELLCIRCLE_1) + " 0 2" );
			layout.append( "button 95  182 " + Cint(G_SPELLCIRCLE_2) + " " + Cint(G_SPELLCIRCLE_2) + " 0 3" );
			layout.append( "button 130 182 " + Cint(G_SPELLCIRCLE_3) + " " + Cint(G_SPELLCIRCLE_3) + " 0 4" );
			layout.append( "button 165 182 " + Cint(G_SPELLCIRCLE_4) + " " + Cint(G_SPELLCIRCLE_4) + " 0 5" );
			layout.append( "button 230 182 " + Cint(G_SPELLCIRCLE_5) + " " + Cint(G_SPELLCIRCLE_5) + " 0 6" );
			layout.append( "button 265 182 " + Cint(G_SPELLCIRCLE_6) + " " + Cint(G_SPELLCIRCLE_6) + " 0 7" );
			layout.append( "button 300 182 " + Cint(G_SPELLCIRCLE_7) + " " + Cint(G_SPELLCIRCLE_7) + " 0 8" );
			layout.append( "button 335 182 " + Cint(G_SPELLCIRCLE_8) + " " + Cint(G_SPELLCIRCLE_8) + " 0 9" );
	endcase

	// Main Page
	layout.append( "page 1" );
	layout.append( "text 90 17 0 2" );
	layout.append( "button 60  15 " + Cint(G_RED_DIAMOND_0) + " " + Cint(G_RED_DIAMOND_1) + " 1 0 " + Cint(RENAME_BOOK) );

	if( runes_def.size() )
		layout.append( "button 324 9 " + Cint(G_CORNER_RIGHT)  + " " + Cint(G_CORNER_RIGHT)  + " 0 2" );
	endif

	x := 60;
	y := 56;
	for( rune_count := 1; rune_count <= runes_def.size(); rune_count := rune_count + 1 )
		if( runes_def[rune_count] )
			runes_def[rune_count].dtindex	:= data.size();

			if( runes_def[rune_count].defloc )
				if( !defloc )
					defloc := rune_count;
				else
					SetDefaultLocation( runebook, runes_def, defloc, rune_count );
				endif
			endif

			if( rune_count == 9 )
				x := 219;
				y := 56;
			endif

			name := runes_def[rune_count].name;
			if( name["A recall rune for "] )
				name := name - "A recall rune for ";
				runes_def[rune_count].name := name;
			elseif( name["A recall rune for"] )
				name := name - "A recall rune for";
				runes_def[rune_count].name := name;
			endif

			if( !name )
				name := "a marked recall rune";
				runes_def[rune_count].name := name;

			else //if( len(name) > 15 ) //<---- speed UP
				name := name[1,15]; //TruncName( name ); //<---- speed UP
			endif

			data.append( name );
			layout.append( "text " + (x+15) + " " + y + " 0 " + runes_def[rune_count].dtindex );
			layout.append( "button " + x + " " + (y+5) + " " + Cint(G_BLUE_SMALL_CIRCLE_1) + " " + Cint(G_BLUE_SMALL_CIRCLE_0) + " 1 0 " + Cint(RECALL_WITH_CHARGES+rune_count-1) );
			y := y + 15;
		else
			break;
		endif
	endfor

	// Other pages
	rune_count := 1;
	for( page_count := 2; page_count <= (max_page+1); page_count := page_count+1 )
		layout.append( "page " + page_count );
		layout.append( "button 53  9 " + Cint(G_CORNER_LEFT) + " " + Cint(G_CORNER_LEFT) + " 0 " + Cint(page_count-1) );

		if( page_count < (max_page+1) )
			layout.append( "button 325 9 " + Cint(G_CORNER_RIGHT) + " " + Cint(G_CORNER_RIGHT) + " 0 " + Cint(page_count+1) );
		endif

		if( rune_count <= runes_def.size() )
			info := runes_def[rune_count];
			if( info )
				if( info.defloc )
					layout.append( "button 90 15 " + Cint(G_SMALL_RED_CIRCLE) + " " + Cint(G_SMALL_RED_CIRCLE) + " 1 0 " + Cint(RESET_DEFAULT_LOCATION+rune_count-1) );
				else
					layout.append( "button 90 15 " + Cint(G_SMALL_GREEN_CIRCLE) + " " + Cint(G_SMALL_GREEN_CIRCLE) + " 1 0 " + Cint(SET_DEFAULT_LOCATION+rune_count-1) );
				endif
//<---- speed UP
/*				layout.append( "text 65 76 0 " + data.size() );
				data.append( GetSextantLatitude( info.toy ) );
				layout.append( "text 65 91 0 " + data.size() );
				data.append( GetSextantLongitude( info.tox ) );
*/
				layout.append( "text 105  10 0 3" );
				layout.append( "text 80  110 0 4" );
				layout.append( "text 75   56 0 " + info.dtindex );
				layout.append( "button 60  61  " + Cint(G_BLUE_SMALL_CIRCLE_1)   + " " + Cint(G_BLUE_SMALL_CIRCLE_0)   + " 1 0 " + Cint(RECALL_WITH_CHARGES+rune_count-1) );
				layout.append( "button 65  115 " + Cint(G_GOLD_ARROW_DOWN_0)     + " " + Cint(G_GOLD_ARROW_DOWN_1)     + " 1 0 " + Cint(DROP_RUNE+rune_count-1) );
				layout.append( "button 65  135 " + Cint(G_SPELLICON_RECALL)      + " " + Cint(G_SPELLICON_RECALL)      + " 1 0 " + Cint(RECALL_WITHOUT_CHARGES+rune_count-1) );
				layout.append( "button 135 135 " + Cint(G_SPELLICON_GATE_TRAVEL) + " " + Cint(G_SPELLICON_GATE_TRAVEL) + " 1 0 " + Cint(GATE_WITHOUT_CHARGES+rune_count-1) );
				rune_count := rune_count + 1;
			endif
		else
			break;
		endif

		if( rune_count <= runes_def.size() )
			info	   := runes_def[rune_count];
			if( info )
				if( info.defloc )
					layout.append( "button 230 15 " + Cint(G_SMALL_RED_CIRCLE) + " " + Cint(G_SMALL_RED_CIRCLE) + " 1 0 " + Cint(RESET_DEFAULT_LOCATION+rune_count-1) );
				else
					layout.append( "button 230 15 " + Cint(G_SMALL_GREEN_CIRCLE) + " " + Cint(G_SMALL_GREEN_CIRCLE) + " 1 0 " + Cint(SET_DEFAULT_LOCATION+rune_count-1) );
				endif
//<---- speed UP
/*				layout.append( "text 225 76 0 " + data.size() );
				data.append( GetSextantLatitude( info.toy ) );
				layout.append( "text 225 91 0 " + data.size() );
				data.append( GetSextantLongitude( info.tox ) );
*/
				layout.append( "text 245  10 0 3" );
				layout.append( "text 240 110 0 4" );
				layout.append( "text 234  56 0 " + info.dtindex );
				layout.append( "button 219 61  " + Cint(G_BLUE_SMALL_CIRCLE_1)   + " " + Cint(G_BLUE_SMALL_CIRCLE_0)   + " 1 0 " + Cint(RECALL_WITH_CHARGES+rune_count-1) );
				layout.append( "button 225 115 " + Cint(G_GOLD_ARROW_DOWN_0)     + " " +Cint(G_GOLD_ARROW_DOWN_1)     + " 1 0 " + Cint(DROP_RUNE+rune_count-1) );
				layout.append( "button 225 135 " + Cint(G_SPELLICON_RECALL)      + " " +Cint(G_SPELLICON_RECALL)      + " 1 0 " + Cint(RECALL_WITHOUT_CHARGES+rune_count-1) );
				layout.append( "button 295 135 " + Cint(G_SPELLICON_GATE_TRAVEL) + " " +Cint(G_SPELLICON_GATE_TRAVEL) + " 1 0 " + Cint(GATE_WITHOUT_CHARGES+rune_count-1) );
				rune_count := rune_count + 1;
			endif
		else
			break;
		endif
	endfor

	ret := SendDialogGump( who, layout, data );
	if( !ret[0] )
		return;
	endif

	ret   := Cint( ret[0] );
	type  := Cint( ret/0x10 );
	index := Cint(ret - Cint((type*0x10))+1);

	case( type )
		0:	if( RenameBook( who, runebook ) )
			msg := "The runebook was successfuly renamed to " + Cstr(GetObjProperty(runebook, "name" ) );
			endif
			break;

		1:	if( !RecallWithCharges( who, runebook, charges, runes_def, index ) )
				SendSysmessage( who, "Recall Failed." );
			endif
			break;

		2:	if( !RecallWithoutCharges( who, runebook, runes_def, index ) )
				SendSysmessage( who, "Recall Failed." );
			endif
			break;

		3:	ReleaseItem( runebook );
			if( !GateWithoutCharges( who, runebook, runes_def, index ) )
				SendSysmessage( who, "Gate Failed." );
			endif
			break;

		4:	if( SetDefaultLocation( runebook, runes_def, index, defloc ) )
				msg := "Rune " + runes_def[index].name + " was successfuly set as default location.";
			endif
			break;

		5:	if( ResetDefaultLocation( runebook, runes_def, index ) )
				msg := "Default var " + runes_def[index].name + " was successfuly reseted.";
			endif
			break;

		6:	if( !DropRune( who, runebook, runes_def, index ) )
				msg := "Couldn't drop the rune.";
			endif
			break;
	endcase

	SetObjProperty( runebook, "RuneDefs", runes_def );

	if( msg )
		SendSysMessage( who, msg );
	endif

	UpdateName( runebook, charges );

endprogram


function UpdateName( runebook, charges )

	set_critical(1);

	var name := GetObjProperty( runebook, "name" );
	if( !name )
		name := "Runebook";
	endif

	runebook.name := name + " [charges: " + charges + "]";
	
	set_critical(0);

endfunction


function RenameBook( who, runebook )

	var name := SendTextEntryGump( who, "Enter the new name of the runebook. ", TE_CANCEL_ENABLE, TE_STYLE_NORMAL );
	if( name )
		SetObjProperty( runebook, "name", name );
		return 1;
	else
		return 0;
	endif

endfunction


function RecallWithCharges( who, runebook, byref charges, byref runes_def, index )

	if( !runes_def[index] )
		SendSysMessage( who, "Error 1: Rune not found." );
		return 0;
	endif

	var new_charges := Cint( GetObjProperty( runebook, "charges" ) );

	if( new_charges < 1 )
		SendSysMessage( who, "The runebook is out of charges.");
		SetObjProperty( runebook, "charges", 0 );
	else
		var tox := Cint(runes_def[index].tox);
		var toy := Cint(runes_def[index].toy);
		var toz := Cint(runes_def[index].toz);

		if( !tox and !toy and !toz )
			SendSysMessage( who, "Error 2: Blank rune!" );
			DestroyRune( runebook, runes_def, index );
			return 0;
		endif

		new_charges := new_charges - 1;
		SetObjProperty( runebook, "charges", new_charges );
		charges	:= new_charges;

		if( !CustomRecall( who, tox, toy, toz, 1 ) )
			return 0;
		endif
	endif

	return 1;

endfunction


function RecallWithoutCharges( who, runebook, byref runes_def, index )

	if( !runes_def[index] )
		SendSysMessage( who, "Error 1: Rune not found." );
		return 0;
	endif

	var tox := Cint(runes_def[index].tox);
	var toy := Cint(runes_def[index].toy);
	var toz := Cint(runes_def[index].toz);

	if( !tox and !toy and !toz )
		SendSysMessage( who, "Error 2: Blank rune!" );
		DestroyRune( runebook, runes_def, index );
		return 0;
	endif

	if( !CustomRecall( who, tox, toy, toz ) )
		return 0;
	endif

	return 1;

endfunction


function GateWithoutCharges( who, runebook, byref runes_def, index )

	if( !runes_def[index] )
		SendSysMessage( who, "Error 1: Rune not found." );
		return 0;
	endif

	var tox := Cint(runes_def[index].tox);
	var toy := Cint(runes_def[index].toy);
	var toz := Cint(runes_def[index].toz);

	if( !tox and !toy and !toz )
		SendSysMessage( who, "Error 2: Blank rune!" );
		DestroyRune( runebook, runes_def, index );
		return 0;
	endif

	if( !CustomGate( who, tox, toy, toz ) )
		return 0;
	endif

	return 1;

endfunction


function SetDefaultLocation( runebook, byref runes_def, index, defloc := 0 )

	var old_prio := set_priority(100);

	if( !runes_def[index] )
		set_priority(old_prio);
		return 0;
	endif

	var tox := Cint(runes_def[index].tox);
	var toy := Cint(runes_def[index].toy);
	var toz := Cint(runes_def[index].toz);

	if( !tox and !toy and !toz )
		DestroyRune( runebook, runes_def, index );
		set_priority(old_prio);
		return 0;
	endif

	if( runes_def[defloc] )
		if( !ResetDefaultLocation( runebook, runes_def, defloc ) )
			set_priority(old_prio);
			return 0;
		endif
	endif

	SetObjProperty( runebook, "x", tox );
	SetObjProperty( runebook, "y", toy );
	SetObjProperty( runebook, "z", toz );
	runes_def[index].defloc := 1;

	set_priority(old_prio);
	return 1;

endfunction


function ResetDefaultLocation( runebook, byref runes_def, index )

	var old_prio := set_priority(100);

	if( !runes_def[index] )
		set_priority(old_prio);
		return 0;
	endif

	EraseObjProperty( runebook, "x" );
	EraseObjProperty( runebook, "y" );
	EraseObjProperty( runebook, "z" );
	runes_def[index].defloc := 0;

	set_priority(old_prio);
	return 1;

endfunction


function DropRune( who, runebook, byref runes_def, index )

	set_critical(1);

	UpdateRunesDef( runebook, runes_def );

	if( !runes_def[index] )
		SendSysMessage( who, "Error 1: Rune not found." );
		set_critical(0);
		return 0;
	endif

	if( runes_def[index].defloc )
		ResetDefaultLocation( runebook, runes_def, index );
	endif

	var rune := CreateItemInContainer( who.backpack, UOBJ_RUNE );
	if( !rune )
		SendSysMessage( who, "Error 2: Your backpack is full." );
		set_critical(0);
		return 0;
	endif

	var name := runes_def[index].name;
	var tox  := Cint(runes_def[index].tox);
	var toy  := Cint(runes_def[index].toy);
	var toz  := Cint(runes_def[index].toz);

	if( !runes_def.erase(index) )
		SendSysMessage( who, "Error 3: Couldn't erase the rune data from the book." );
		DestroyItem( rune );
		set_critical(0);
		return 0;
	endif

	if( !tox and !toy and !toz )
		SendSysMessage( who, "Error 4: Blank rune!" );
		DestroyItem( rune );
		set_critical(0);
		return 0;
	endif

	if( !name )
		name := "a marked recall rune";
	elseif( name != "a marked recall rune" )
		var splited := SplitWords( name );
		name := "A recall rune for";
		foreach part in splited
			name := name + " " + part;
		endforeach
	endif

	if( !SetObjProperty( rune, "x", tox ) and
	    !SetObjProperty( rune, "y", toy ) and
	    !SetObjProperty( rune, "z", toz ) )
	    	SendSysMessage( who, "Error 5: Couldn't copy the destination data on the rune!" );
	    	DestroyItem( rune );
	    	set_critical(0);
		return 0;
	endif

	SendSysMessage( who, "Rune " + name + " was successfuly dropped in your backpack." );

	rune.name := name;

	set_critical(0);
	return 1;

endfunction


function DestroyRune( runebook, byref runes_def, index )

	set_critical(1);

	UpdateRunesDef( runebook, runes_def );

	if( !runes_def[index] )
		set_critical(0);
		return 0;
	endif

	if( !runes_def.erase(index) )
		set_critical(0);
		return 0;
	endif

	set_critical(0);
	return 1;

endfunction


function UpdateRunesDef( runebook, byref runes_def )

	set_critical(1);

	var current_defs := GetObjProperty( runebook, "RuneDefs" );
	if( !current_defs )
		current_defs := array;
	endif

	runes_def := current_defs;
	
	set_critical(0);

endfunction


function GetSextantLatitude( y )

	var degrees := (y-1624) * 0.087890625;
	var minutes;
	var direction;

	if( degrees < 0 )
		direction := "N";
	else
		direction := "S";
	endif

	degrees := Abs( degrees );
	minutes := CInt((CInt((degrees-Floor(degrees))*100)*60)/100);

	return (Floor(degrees) + "o" + minutes + "'" + direction);

endfunction


function GetSextantLongitude( x )

	var degrees := (x-1323) * 0.0703125;
	var minutes;
	var direction;

	if( degrees < 0 )
		direction := "W";
	else
		direction := "E";
	endif

	degrees := Abs( degrees );
	minutes := CInt((CInt((degrees-Floor(degrees))*100)*60)/100);

	return (Floor(degrees) + "o" + minutes + "'" + direction);

endfunction


function TruncName( name )

	var the_name	:= "";
	var splited	:= SplitWords( name );

	foreach word in splited
		if( (len(word) + len(the_name)) < 15 )
			if( the_name = "" )
				the_name := word;
			else
				the_name := the_name + " " + word;
			endif
		else
			break;
		endif
	endforeach

	if( the_name == "" )
		the_name := name[1,16];
	endif

	return the_name;

endfunction




function can_cast( me, circle )

	if(me.dead) return 0; endif

	var max_circle := GetMaxCircle( me );
	if( max_circle )
		if( circle > max_circle )
			PlayObjectCenteredEffect( me , FX_SPELL_FIZZLE , SPEED_SPELL_FIZZLE , LOOP_SPELL_FIZZLE );
			PlaySoundEffect( me, SFX_SPELL_FIZZLE );
			SendSysMessage( me, ERROR_MSG_NOT_ENOUGH_SKILL );
			return 0;
		endif
	endif

	return 1;

endfunction






function TruncPkgName( name )

	if( name[1] = ":" )
		var i;
		for( i := 2 ; i <= len(name) ; i := i + 1 )
			if( name[i] = ":" )
				break;
			endif
		endfor

		return name[i+1,len(name)];

	else
		return name;
	endif

endfunction


function TryToCast( caster, spell, anim := ANIM_CAST_DIR )

	if( !caster.cmdlevel )
		if( IsInAntiMagicArea( caster ) )
			SendSysMessage( caster, ERROR_MSG_ANTI_MAGIC_AREA );
			return IN_ANTIMAGIC_AREA;
		endif
	endif

	//Variables declaration and initialisation
	var conf	 := ReadConfigFile( ":*:spells" );
	var elem	 := FindConfigElem( conf, spell );
	var circ	 := GetConfigInt( elem, "Circle" );
	conf	 	 := ReadConfigFile( ":*:circles" );
	var spelldelay := Cint( conf[circ].Delay );
	var value	 := Cint( conf[circ].PointValue );
	var manacost	 := Cint( conf[circ].Mana );
	var difficulty := Cint( conf[circ].Difficulty );

	//Casting Options management
	var options := GetObjProperty( caster, CASTINGOPT_PROP_NAME );
	if( !options )
		options := GetObjProperty( caster, PERM_CASTINGOPT_PROP_NAME );
		if( !options )
			options := "";
		endif
	else
		EraseObjProperty( caster, CASTINGOPT_PROP_NAME );
	endif

	//Try to cast the spell
	PerformAction( caster, anim );

	//Speak the power words
	if ( !FindOption( options, CASTINGOPT_NO_WORDS ) )
                SpeakPowerWords( caster, spell );
	endif

	//Check for the equipment in hands
	if( !FindOption( options, CASTINGOPT_ANY_EQUIPMENT ) )

		var hand1	:= GetEquipmentByLayer( caster, LAYER_HAND1 );
		var hand2	:= GetEquipmentByLayer( caster, LAYER_HAND2 );

		if( hand1 or hand2 )
			var weapcfg := ReadConfigFile( ":*:itemdesc" );

			if( hand1 and weapcfg[hand1.objtype].BlocksCastingIfInHand != 0 )
				SendSysmessage( caster, ERROR_MSG_WRONG_EQUIPMENT );
				PlayObjectCenteredEffect( caster, FX_SPELL_FIZZLE, SPEED_SPELL_FIZZLE, LOOP_SPELL_FIZZLE );
				PlaySoundEffect( caster, SFX_SPELL_FIZZLE );
				return INVALID_EQUIPMENT;
			endif

			if( hand2 and weapcfg[hand2.objtype].BlocksCastingIfInHand != 0)
				SendSysmessage( caster, ERROR_MSG_WRONG_EQUIPMENT );
				PlayObjectCenteredEffect( caster, FX_SPELL_FIZZLE , SPEED_SPELL_FIZZLE , LOOP_SPELL_FIZZLE );
				PlaySoundEffect( caster, SFX_SPELL_FIZZLE );
				return INVALID_EQUIPMENT;
			endif
		endif
	endif

	//Delay and interruption management
	if( !FindOption( options, CASTINGOPT_NO_DELAY ) )
		var shp := GetVital( caster, "life" );
		var sx := caster.x;
		var sy := caster.y;
		var sz := caster.z;

		//True mages cast faster
		if( GetObjProperty( caster, CLASSEID_MAGE ) )
			spelldelay := Cint( spelldelay / ClasseBonus( caster, CLASSEID_MAGE ) );
		elseif( GetObjProperty( caster, CLASSEID_WARRIOR ) )
			spelldelay := Cint( spelldelay * ClasseBonus( caster, CLASSEID_WARRIOR ) );
		endif

		while( spelldelay >= 500 )
			Sleepms( 500 );
			spelldelay := spelldelay - 500;
			if( GetVital( caster, "life" ) < shp )
				SendSysmessage( caster, ERROR_MSG_INTERRUPTED );
				PlayObjectCenteredEffect(caster, FX_SPELL_FIZZLE, SPEED_SPELL_FIZZLE, LOOP_SPELL_FIZZLE );
				PlaySoundEffect(caster, SFX_SPELL_FIZZLE);
				return INTERRUPTED;
			endif

			if( caster.x != sx or caster.y != sy or caster.z != sz )
				SendSysmessage( caster, ERROR_MSG_LOST_CONCENTRATION );
				PlayObjectCenteredEffect(caster, FX_SPELL_FIZZLE, SPEED_SPELL_FIZZLE, LOOP_SPELL_FIZZLE );
				PlaySoundEffect(caster, SFX_SPELL_FIZZLE);
				return INTERRUPTED;
			endif
		endwhile

		sleepms( spelldelay );

		if( GetVital( caster, "life" ) < shp )
			SendSysmessage( caster , ERROR_MSG_INTERRUPTED );
			PlayObjectCenteredEffect(caster, FX_SPELL_FIZZLE, SPEED_SPELL_FIZZLE, LOOP_SPELL_FIZZLE );
			PlaySoundEffect(caster, SFX_SPELL_FIZZLE);
			return INTERRUPTED;
		endif

		if( caster.x != sx or caster.y != sy or caster.z != sz )
			SendSysmessage( caster, ERROR_MSG_LOST_CONCENTRATION );
			PlayObjectCenteredEffect(caster, FX_SPELL_FIZZLE, SPEED_SPELL_FIZZLE, LOOP_SPELL_FIZZLE );
			PlaySoundEffect(caster, SFX_SPELL_FIZZLE);
			return INTERRUPTED;
		endif
	endif

	//Consume the reagents
	if( !FindOption( options, CASTINGOPT_NO_REAGENTS ) )
                if( !ConsumeReagents( caster, spell ) )
			PlayObjectCenteredEffect(caster, FX_SPELL_FIZZLE, SPEED_SPELL_FIZZLE , LOOP_SPELL_FIZZLE );
			PlaySoundEffect(caster, SFX_SPELL_FIZZLE);
			SendSysMessage( caster, ERROR_MSG_NOT_ENOUGH_REAGENTS );
			return NO_REGS;
		endif
	endif

	//Consume the mana
	if( !FindOption( options, CASTINGOPT_NO_MANA ) )
                if( !ConsumeMana( caster, spell ) )
			PlayObjectCenteredEffect(caster, FX_SPELL_FIZZLE, SPEED_SPELL_FIZZLE, LOOP_SPELL_FIZZLE);
			PlaySoundEffect(caster, SFX_SPELL_FIZZLE);
			SendSysMessage( caster, ERROR_MSG_NOT_ENOUGH_MANA );
			return NO_MANA;
		endif
	endif

	//Do the skill check and return mana if failure occur
	if( !FindOption( options , CASTINGOPT_NO_SKILL_CHECK ) )
        	if( !CheckSkill( caster , SKILLID_MAGERY , difficulty , value ) )
			caster.mana := caster.mana + manacost;
			if( caster.mana > caster.maxmana )
				caster.mana := caster.maxmana;
			endif
			PlayObjectCenteredEffect(caster, FX_SPELL_FIZZLE, SPEED_SPELL_FIZZLE, LOOP_SPELL_FIZZLE );
			PlaySoundEffect( caster, SFX_SPELL_FIZZLE );
			SendSysmessage( caster, ERROR_MSG_FIZZLE );
			return NO_SKILL;
		endif
	endif

	return SUCCESS;

endfunction

function IsForbiddenAreaFor( who, x, y )

	if( who.cmdlevel )
		return 0;
	endif
	
	var old_prio	:= set_priority(100);
	var disabled	:= GetGlobalProperty( PROPID_GLOBAL_AREAS_FORBIDDEN );
	if( !disabled )
		disabled := {};
	endif
	
	var banned := GetObjProperty( who, PROPID_MOBILE_AREAS_BANNED );
	if( !banned )
		if( !len(disabled) )
			set_priority(old_prio);
			return 0;
		else
			banned := {};
		endif
	endif
	
	var areas_cfg	:= ReadConfigfile( CFGFILE_AREAS );
	var areas	:= GetConfigStringArray( areas_cfg[1], "Area" );
	if(!areas)
		set_priority(old_prio);
		return 0;
	endif

	var allowed := GetObjProperty( who, PROPID_MOBILE_AREAS_ALLOWED_FORBIDDEN );
	if( !allowed )
		allowed := {};
	endif
	
	var i;
	var splited;
	var where := struct;
	where.+x  := x;
	where.+y  := y;
	for( i := 1; i <= areas.size(); i := i + 1 )
		if( banned[i] )
			splited := SplitWords( areas[i] );
			if( IsInBox( where, Cint(splited[1]), Cint(splited[2]), Cint(splited[3]), Cint(splited[4]) ) )
				set_priority(old_prio);
				return 1;
			endif
		elseif( disabled[i] )
			if( !allowed[i] )
				splited := SplitWords( areas[i] );
				if( IsInBox( where, Cint(splited[1]), Cint(splited[2]), Cint(splited[3]), Cint(splited[4]) ) )
					set_priority(old_prio);
					return 1;
				endif
			endif
		endif
	endfor
	
	set_priority(old_prio);

	return 0;

endfunction


function IsForbiddenAreaToGateFrom( byref who )

	return IsForbiddenAreaToRecallFrom( who );

endfunction


function IsForbiddenAreaToGateTo( byref who, byref x, byref y )

	return IsForbiddenAreaToRecallTo( who, x, y );

endfunction


function IsForbiddenAreaToRecallFrom( byref who )

	if( who.cmdlevel )
		return 0;
	endif

	var old_prio := set_priority(100);	
	if( !CheckPoz( who.x, who.y ) )
		set_priority(old_prio);
		return 1;
	endif
	
	set_priority(old_prio);
	return 0;
	
endfunction


function IsForbiddenAreaToRecallTo( byref who, byref x, byref y )
	
	if( who.cmdlevel )
		return 0;
	endif

	var old_prio := set_priority(100);

	if( !CheckPoz( x, y ) )
		set_priority(old_prio);
		return 1;
	endif
/*
	var multi := GetMultiAtLocation( x, y );
	if( multi )
		if( !IsWelcomeInHouse( who, multi ) )
			set_priority(old_prio);
			return 1;
		endif
	endif
*/
	var disabled_recall := GetGlobalProperty( PROPID_GLOBAL_AREAS_NORECALL );
	if( !disabled_recall )
		disabled_recall := {};
	endif

	var forbidden	:= GetGlobalProperty( PROPID_GLOBAL_AREAS_FORBIDDEN );
	if( !forbidden )
		forbidden := {};
	endif

	var banned := GetObjProperty( who, PROPID_MOBILE_AREAS_BANNED );
	if( !banned )
		if( !disabled_recall.size() )
			if( !forbidden.size() )
				set_priority(old_prio);
				return 0;
			endif
		endif
		banned := {};
	endif
	
	var areas_cfg	:= ReadConfigfile( CFGFILE_AREAS );
	var areas	:= GetConfigStringArray( areas_cfg[1], "Area" );
	if( !areas )
		set_priority(old_prio);
		return 0;
	endif
	
	var allowed_recall := GetObjProperty( who, PROPID_MOBILE_AREAS_ALLOWED_RECALLING );
	if( !allowed_recall )
		allowed_recall := {};
	endif	
	
	var allowed_forbidden := GetObjProperty( who, PROPID_MOBILE_AREAS_ALLOWED_FORBIDDEN );
	if( !allowed_forbidden )
		allowed_forbidden := {};
	endif
		
	var object	:= struct;
	object.+x	:= x;
	object.+y	:= y;
	
	var i;
	var splited;
	for( i := 1; i <= areas.size(); i := i + 1 )
		if( banned[i] )
			splited := SplitWords( areas[i] );
			if( IsInBox( object, Cint(splited[1]), Cint(splited[2]), Cint(splited[3]), Cint(splited[4]) ) )
				set_priority(old_prio);
				return 1;
			endif
		elseif( disabled_recall[i] )
			if( !allowed_recall[i] )
				splited := SplitWords( areas[i] );
				if( IsInBox( object, Cint(splited[1]), Cint(splited[2]), Cint(splited[3]), Cint(splited[4]) ) )
					set_priority(old_prio);
					return 1;
				endif
			endif
		elseif( forbidden[i] )
			if( !allowed_forbidden[i] )
				splited := SplitWords( areas[i] );
				if( IsInBox( object, Cint(splited[1]), Cint(splited[2]), Cint(splited[3]), Cint(splited[4]) ) )
					set_priority(old_prio);
					return 1;
				endif
			endif
		endif
	endfor
	
	set_priority(old_prio);
	return 0;

endfunction

function CheckPoz( byref x, byref y )

	// Arena
	if( x >= 1385 )
		if( x <= 1414 )
			if( y >= 3729 )
				if( y <= 3758 )
					return 0;
				endif
			endif
		endif
		
		// Wind
		if( x >= 5120 )
			if( x <= 5374 )
				if( y >= 0 )
					if( y <= 254 )
						return 0;
					endif
				endif
			endif
			
			// Jail
			if( x >= 5272 )
				if( x <= 5310 )
					if( y >= 1160 )
						if( y <= 1190 )
							return 0;
						endif
					endif
				endif
				
				// Newbie Dungeon
				if( x >= 5487 )
					if( x <= 5623 )
						if( y >= 344 )
							if( y <= 375 )
								return 0;
							endif
						endif
					endif
					
					// Race Gates
					if( x >= 5536 )
						if( x <= 5570 )
							if( y >= 1154 )
								if( y <= 1183 )
									return 0;
								endif
							endif
						endif
					endif
				endif
			endif
		endif
	endif

	return 1;
	
endfunction


function IsOwner( who, house )
	if( who.serial == CInt( GetObjProperty( house, "ownerserial" ) ) )
		return( 1 );
	else
		var i;
		for( i := 1 ; i <= MAX_CO_OWNERS ; i := i + 1 )
			if( who.serial == CInt( GetObjProperty( house , "Co-owner" + i ) ) )
				return( 1 );
			endif
		endfor
	endif
	return( 0 );
endfunction

function IsFriend( who, house )
	var i;
	for( i := 1 ; i <= MAX_FRIENDS ; i := i + 1 )
		if( who.serial == CInt( GetObjProperty( house , "friend" + i ) ) )
			return( 1 );
		endif
	endfor
	return( 0 );
endfunction

function IsInBox( byref object, byref x1, byref x2, byref y1, byref y2 )

	if( object.x >= x1 )
		if( object.x <= x2 )
			if( object.y >= y1 )
				if( object.y <= y2 )
					return 1;
				endif
			endif
		endif
	endif
	
	return 0;

endfunction

