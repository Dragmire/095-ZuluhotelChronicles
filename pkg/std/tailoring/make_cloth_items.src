/////////////////////////////////////////////////////////////////////////////
//
//	Tailoring: Original Code by Racalac
//	Updated: 8/25/1999	 By: Sentack
//	TODO: Move all the UOBJ objects to "include/objtype.inc"
//
//	NOTES: Lines 129 and 196 are optional statments that are designed to
//		replace lines 127 and 194.	They are used to remove a random amount of
//		cloth from the players inventory instead of just one unit of cloth
//		as does the OSI way of dealing with failer.	Sometimes you lose a little
//		while other times you lose a lot.	But never more then the amount of
//		cloth the object original was going to take.
/////////////////////////////////////////////////////////////////////////////

use uo;
use cfgfile;
use os;
use math;

include "include/yesno";
include "include/attributes";
include "include/objtype";
include "include/client";
include "include/string";
include "include/classes";
include "include/itemutil";
include "include/random";
include "util/repair";
include "include/autoloop";

const SCISSORS_SOUND    := 0x0249;
const ID_HIDES          := 1;
const ID_CLOTH          := 2;
const DIVIDER           := 3;
const APPEAR_AT         := -10;
const POINTS_MULTIPLIER := 8;
const FAME_BONUS        := 100;

var tailor_cfg          := ReadConfigFile( "tailoring" );
var tailor_items        := ReadConfigFile( ":tailoring:itemdesc" );
var resource_diff       := 0;
var resource_qual       := 1;
var resource_name;

program use_sewing_kit( character, sewing_kit )

	if( !ReserveItem( sewing_kit ) )
		return;
	endif

	var item;

	SendSysMessage( character, "What would you like to use that on?" );
	var use_on := Target( character, TGTOPT_CHECK_LOS );

	if( !use_on )
		return;
	endif

	if( !Accessible( character, use_on ) )
		SendSysMessage( character, "You can't reach that." );
		return;
	endif

	if( !ReserveItem(use_on) )
		return;
	endif

	if( !IsInContainer( character.backpack, use_on ) )
		SendSysMessage( character, "That item has to be in your backpack." );
		return;
	endif

	if( IsHat( use_on ) && use_on.hp == use_on.maxhp )
		FortifyHat( character, use_on );

	elseif( use_on.hp && use_on.quality && tailor_items[use_on.objtype] )
		repair_item( character, use_on, SKILLID_TAILORING );

	elseif( IsHide( use_on.objtype ) )
		item := MakeAndProcessMenu( character, use_on, ID_HIDES );

	elseif( use_on.objtype == UOBJ_MUTLI_CLOTH )
		item := MakeAndProcessMenu( character, use_on, ID_CLOTH );

	else
		SendSysMessage( character, "You don't know how to use those items together." );
	endif

	item := item.objtype;
	if( !item )
		return;
	endif

	TryToMakeItem( character, use_on, item );

endprogram


function MakeAndProcessMenu( character, use_on, id )

	resource_diff := tailor_cfg[use_on.objtype].Difficulty;

	var skill := GetAttribute( character, ATTRIBUTEID_TAILORING );
	if( skill < resource_diff )
		SendSysMessage( character, "You aren't skilled enough to make anything with this yet." );
		return;
	endif

	resource_name := tailor_cfg[use_on.objtype].Name;
	resource_qual := tailor_cfg[use_on.objtype].quality;

	var elemkeys := GetConfigStringKeys( tailor_cfg );
	var can_make;
	var choice;

	var menu := CreateMenu( "What would you like to make?" );

	case( id )

		ID_HIDES:
			AddMenuItem( menu, 0x13cc, "Leather Armors" );
			AddMenuItem( menu, 0x13db, "Studded Leather Armors" );
			AddMenuItem( menu, 0x1c02, "Females Armors" );
			AddMenuItem( menu, 0x1711, "Shoes" );
			AddMenuItem( menu, 0x141b, "Misc" );
			AddMenuItem( menu, 0x0e76, "Containers" );
			break;

		ID_CLOTH:
			AddMenuItem( menu, 0x1517, "Shirts" );
			AddMenuItem( menu, 0x1539, "Pants" );
			AddMenuItem( menu, 0x1713, "Caps" );
			AddMenuItem( menu, 0x153d, "Misc" );
			AddMenuItem( menu, 0x0ad1, "Carpet" );
			break;

	endcase

	choice := SelectMenuItem2( character, menu ).index;
	if( !choice )
		return;
	endif

	choice := (id * 10) + choice;

	menu := CreateMenu( "What would you like to make?" );

	foreach key in elemkeys
		if( tailor_cfg[key].Type == choice )
			if( CanMake( character, key, use_on ) )
				AddMenuItem( menu, CInt(key), tailor_cfg[key].Name );
				can_make := 1;
			endif
		endif
	endforeach

	if( can_make )
		return SelectMenuItem2( character, menu );
	else
		SendSysMessage( character, "You can't make anything of this category." );
		return;
	endif

endfunction


function CanMake( who, key, resource )

	var diff := tailor_cfg[key].Skill + CInt( resource_diff / DIVIDER );
	if( diff < 1 )
		diff := 1;
	elseif( diff > 130 )
		diff := 130;
	endif

	if( GetAttribute( who, ATTRIBUTEID_TAILORING ) >= ( diff + APPEAR_AT ) )
		if( resource.amount >= tailor_cfg[key].Material )
			return 1;
		endif
	endif

	return 0;

endfunction


function TryToMakeItem( character, resource, to_make_objtype )

	var skill;
	var element;
	var material;
	var points;
	var itemname;

	element := FindConfigElem( tailor_cfg, to_make_objtype );
	if( element )
		material	:= element.Material;
	else
		return;
	endif

	AutoLoop_init( character );
	while( AutoLoop_more() && ( resource.amount >= material ) && not character.dead)

		skill := element.Skill;
		skill := skill + CInt( resource_diff / DIVIDER );

		if( skill < 1 )
			skill := 1;
		elseif( skill > 140 )
			skill := 140;
		endif

		points	:= CInt( (skill + material) * POINTS_MULTIPLIER );

		itemname := element.Name;

		PlaySound( character );

		if( CheckSkill( character, SKILLID_TAILORING, skill, points ) )

			var theitem;
			if( to_make_objtype == UOBJ_BANDAGE )
				material := resource.amount;
				theitem := CreateItemInBackpack( character, to_make_objtype, CInt( material / 4 ) );
			else
				theitem := CreateItemInBackpack( character, to_make_objtype );
			endif

			if( theitem )

				var excep_ch := 10;
				var cprops   := GetConfigStringArray( tailor_cfg[resource.objtype], "CProp" );
				var item_cfg := ReadConfigFile( ":*:itemdesc" );

				//var sell_price := item_cfg[to_make_objtype].VendorBuysFor;

				if( resource_name )
					itemname := resource_name + " " + itemname;
				endif

				if( theitem.quality && resource_qual )
					theitem.quality := resource_qual;
				endif

				if( GetObjProperty( character, CLASSEID_CRAFTER ) )
					excep_ch := CInt( excep_ch * ClasseBonus( character, CLASSEID_CRAFTER ) );
				else
					skill := skill + 20;
				endif

				if( skill < 90 )
					skill := 90;
				endif

				if( ( Random(100) < excep_ch ) && CheckSkill( character, SKILLID_TAILORING, skill, 0 ) )

					//Made something Exceptional
					if( theitem.quality )

						var armslore := GetAttribute( character, ATTRIBUTEID_ARMSLORE );
						var multiplier := 5 + CInt( armslore / 10 );

						if( GetObjProperty( character, CLASSEID_CRAFTER ) )
							multiplier := CInt( multiplier * ClasseBonus( character, CLASSEID_CRAFTER ) );
						endif

						multiplier := 100 + multiplier;
						var newquality := CInt(theitem.quality * multiplier);
						newquality := CDbl(newquality);
						newquality := newquality / 100;
						theitem.quality := newquality;
					endif

						itemname := "Exceptional " + itemname + " [Crafted by " + character.name + "]";

					/*if( sell_price )
						theitem.buyprice := Cint( sell_price * 2 );
					endif*/

					SendSysMessage( character, "You make an exceptional item and put it in your pack" );
					SetObjProperty( theitem, "IsExceptional", 1 );
					if( skill >= 130 )
						SendSysMessage( character, "This masterpiece will make you famous around the world." );
						AwardFame( character, FAME_BONUS );
					elseif( GetObjProperty( character, CLASSEID_CRAFTER ) && skill >= 110 )
						SendSysMessage( character, "This masterpiece will make you famous around the world." );
						AwardFame( character, FAME_BONUS );
					endif
				else

					//Made a normal item
					SendSysMessage( character, "You create the item and place it in your pack." );
				endif

				if( len( cprops ) && ( theitem.equipscript == "::skilladvancerequip" ) )
					foreach cprop in cprops
						var splited := SplitWords( cprop );
						var prop_name := splited[1];
						var prop_mod  := CInt(splited[2]);
						if( prop_name && prop_mod )
							var presently := GetObjProperty( theitem, prop_name );
							if( !presently )
								presently := 0;
							endif

							if( presently && Abs(prop_mod) > Abs(presently) )
								prop_mod := 0 - presently;
							endif

							var resulting := presently + prop_mod;
							if( resulting > 0 && prop_name == "DefaultDex" )
								resulting := 0;
							endif

							if( resulting  )
								SetObjProperty( theitem, prop_name, resulting );
							elseif( presently )
								EraseObjProperty( theitem, prop_name );
							endif
						endif
					endforeach
				endif

				theitem.hp := theitem.maxhp;
				theitem.color := resource.color;
				SubtractAmount( resource, material );
				SetObjProperty( theitem, "BaseName", itemname );
				SetName( theitem, itemname );


				/*if( sell_price )
					if( theitem.quality )
						theitem.buyprice := Cint( Pow( sell_price, theitem.quality ) );
					elseif( resource_qual )
						theitem.buyprice := Cint( Pow( sell_price, resource_qual ) );
					endif
				endif*/

			else
				SubtractAmount( resource, material );
				AutoLoop_finish();
				SendSysMessage( character, "Your backpack is full." );
				return;
			endif

		else

			var tail := GetAttribute( character, ATTRIBUTEID_TAILORING );
			var destroy := 75 - CInt( tail / 2 );
			if( GetObjProperty( character, CLASSEID_CRAFTER ) )
				destroy := CInt( destroy / ClasseBonus( character, CLASSEID_CRAFTER ) );
			endif

			if( destroy > 50 )
				destroy	:= 50;
			endif

			destroy	:= CInt( material * destroy / 100 );
			if( destroy < 1 )
				destroy	:= 1;
			endif

			SubtractAmount( resource, destroy );
			SendSysMessage( character, "You destroyed " + destroy + " " + GetresourceName( resource ) + "." );

		endif
	endwhile

	AutoLoop_finish();

endfunction


function GetresourceName( resource )

	var t_name := resource.desc;

	if( resource.amount > 1 )
		var i := len( t_name );
		var amt := resource.amount;
		var count := 2;
		while( CInt(amt / 10) )
			count := count + 1;
			amt := CInt( amt / 10 );
		endwhile

		t_name := t_name[count+1, i - count];
	endif

	return t_name;

endfunction


function PlaySound( character )

	PlaySoundEffect( character, SCISSORS_SOUND );
	sleep( 1 );
	PlaySoundEffect( character, SCISSORS_SOUND );
	sleep( 1 );

endfunction


function IsHide( objtype )

	if( objtype == UOBJ_HIDE1 || objtype == UOBJ_HIDE2 || objtype == 0x702f || objtype ==0xdc13 )

		return 1;
	elseif( objtype >= UOBJ_HIDES_START && objtype <= UOBJ_HIDES_END )
		return 1;
	else
		return 0;
	endif

endfunction


function FortifyHat( who, hat )

	SendSysMessage( who, "Fortify this hat with what?" );
	var helm := Target( who, TGTOPT_CHECK_LOS );
	if( !helm )
		return;
	endif

	if( !IsHelm(helm) )
		SendSysMessage( who, "That's not a helmet." );
		return;
	endif

	if( !ReserveItem(helm) )
		return 0;
	endif

	if( !IsInContainer( who.backpack, helm ) )
		SendSysMessage( who, "The helm have to be in your backpack." );
		return;
	endif

	PlaySound( who );

	if( !CheckSkill( who, SKILLID_TAILORING, -1, 250 ) )
		SendSysMessage( who, "You fail and ruin both, the hat and the helm." );
		DestroyItem( hat );
		DestroyItem( helm );
		return;
	endif

	DupeItem( hat, helm );
	SetName( helm, "a fortified " + TruncateArticle(hat.desc) );
	DestroyItem( hat );

endfunction


function IsHat( what )

	case( what.graphic )
		0x153f:
		0x1540:
		0x1543:
		0x1544:
		0x1713:
		0x1714:
		0x1715:
		0x1716:
		0x1717:
		0x1718:
		0x1719:
		0x171a:
		0x171b:
		0x171c:		return 1;

		default:	return 0;
	endcase

endfunction


function IsHelm( what )

	case (what.graphic)
		0x13bb:
		0x13c0:
		0x1408:
		0x1409:
		0x140a:
		0x140b:
		0x140c:
		0x140d:
		0x140e:
		0x140f:
		0x1412:
		0x1419:
		0x1451:
		0x1456:
		0x1db9:
		0x1dba:		return 1;
				break;

		default:	return 0;
	endcase

endfunction
