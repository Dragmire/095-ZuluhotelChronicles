use uo;
use os;
use cfgfile;

include "include/yesno";




///////////////////
//  This program is activated by using a mill.  It checks your backpack for items that can be ground,
//  animates the mill, and grinds the ingredients into the product.  The recipes that are valid for
//  grinding are defined in grinding.cfg.
///////////////////

program mill (character, mill_part )

	if(!ReserveItem(mill_part)) return; endif

	var other_mill_part;

	//We need to find the other part of the mill so that we can animate it.
	if (mill_part.objtype == 0x1922)
		foreach mill in ListItemsNearLocation(character.x, character.y, character.z,3)
			if ( mill.objtype == 0x1920)
				other_mill_part := mill;
			endif
		endforeach
		if (!other_mill_part)
			SendSysMessage(character, "That mill appears to be broken.");
			return;
		endif

	elseif (mill_part.objtype == 0x192e)
		foreach mill in ListItemsNearLocation(character.x, character.y, character.z,3)
			if ( mill.objtype == 0x192c)
				other_mill_part := mill;
			endif
		endforeach
		if (!other_mill_part)
			SendSysMessage(character, "That mill appears to be broken.");
			return;
		endif

	//These are if they activated the back part of the mill.   We need to switch the two parts around
	//so they animate correctly.
	elseif (mill_part.objtype == 0x1920)
		other_mill_part := mill_part;
		mill_part := 0;
		foreach mill in ListItemsNearLocation(character.x, character.y, character.z,3)
			if ( mill.objtype == 0x1922)
				mill_part := mill;
			endif
		endforeach
		if (!mill_part)
			SendSysMessage(character, "That mill appears to be broken.");
			return;
		endif

	elseif (mill_part.objtype == 0x192c)
		other_mill_part := mill_part;
		mill_part := 0;
		foreach mill in ListItemsNearLocation(character.x, character.y, character.z,3)
			if ( mill.objtype == 0x192e)
				mill_part := mill;
			endif
		endforeach
		if (!mill_part)
			SendSysMessage(character, "That mill appears to be broken.");
			return;
		endif

	//otherwise, we haven't found a mill.
	else
		SendSysMessage(character, "That mill appears to be broken.");
		return;
	endif

	//Check through the possible items that can be ground, and let the user choose
	var grinding_recipe := select_what_to_grind(character);

	if (!grinding_recipe)
		return;
	endif

	//data to make sure the characters don't move
	var characterx := character.x;
	var charactery := character.y;

	//Send popup menu allowing user to autoloop
	var loopit := YesNo(character,"Autoloop?");

	//Find out how many possible batches we can make
	var makable_batches := CInt(check_backpack_for_ingredient(character, grinding_recipe) / grinding_recipe.ground_amount);
	if (!makable_batches)
		SendSysMessage(character, "You've run out of ingredients!");
		return;
	elseif (makable_batches > 5)
		makable_batches := 5;
	endif

	repeat

		//Now we play the fancy animation for grinding
		animate_mill(character, mill_part, other_mill_part);

		//And then destroy the ingredient
		destroy_ingredient(character, grinding_recipe, makable_batches);
		CreateItemInBackpack(character, grinding_recipe.product_objtype, grinding_recipe.product_amount*makable_batches);
		SendSysMessage(character, "You place the item in your backpack.");

		//See if autoloop is turned on.  If not, quit the program.  If so,
		//put in a bit of a delay before the next round of grinding starts
		if (!loopit)
			return;
		else
			sleep(1);
		endif

		makable_batches := CInt(check_backpack_for_ingredient(character, grinding_recipe) / grinding_recipe.ground_amount);
		if (!makable_batches)
			SendSysMessage(character, "You've run out of ingredients!");
			return;
		elseif (makable_batches > 5)
			makable_batches := 5;
		endif


		//Check to see if they have enough ingredients for another batch
		if (!check_backpack_for_ingredient(character, grinding_recipe) )
			SendSysMessage(character, "You've run out of ingredients!");
			return;
		endif

	//See if the character moved. If so, quit.  Otherwise, loop.
	until (character.x != characterx || character.y != charactery);

endprogram




///////////////////
//  This function goes through a character's backpack and  searches for items that can
//  be ground.  When it finds them, it puts them in a menu so that the character can
//  select which one he wants to make.
///////////////////

function select_what_to_grind(character)

	//First, initialize some variables
	var all_grinding_recipes := ReadConfigFile("grinding");  //array of all the recipes contained in the config file
	var current_recipe := {};  //Recipe that is currently being considered for validity
	var selectmenu := CreateMenu("What do you want to make?");  //Create an empty menu
	var num_recipes := GetConfigMaxIntKey( all_grinding_recipes );  //Number of recipes defined in the config file
	var count;  //used to increment through possible recipes
	var array_valid_recipes := {};  //Array of valid recipes

	//go through each recipe and see if we have the ingredients for it
	for (count := 1; count <= num_recipes; count := count + 1)
		current_recipe := all_grinding_recipes [count];

		if ( check_backpack_for_ingredient(character, current_recipe) )
			AddMenuItem(selectmenu,CInt(current_recipe.product_objtype), current_recipe.product_name);

			//Add the current recipe to the list with the others and increment the counter
			array_valid_recipes[len(array_valid_recipes)+1] := current_recipe;
		endif
	endfor

	//If there's no recipes that can be made, give error and quit
	if (!len(array_valid_recipes))
		SendSysMessage(character, "You don't have anything that can be ground.");
		return;

	//If there's only 1 possible recipe, just make it automatically
	elseif (len(array_valid_recipes) == 1)
		return array_valid_recipes[1];
	endif

	//Otherwise, display the menu and allow the user to choose
	var selection := SelectMenuItem2(character, selectmenu);

	//Make sure they selected a valid item
	if (!selection)
		SendSysMessage(character,"Canceled");
		return;
	endif

	//Then return the recipe that was selected
	return array_valid_recipes[selection.index];

endfunction




///////////////////
//  This function checks to see if the player has the neccessary items for the given grinding recipe
///////////////////

function check_backpack_for_ingredient(character, grinding_recipe)

	//Use FindObjtypeInContainer to find what we're looking for
	var found_ground_item := FindObjtypeInContainer(character.backpack, grinding_recipe.ground_item);

	//If we didn't find what we need, fail
	if (!found_ground_item)
		return 0;

	//If we found enough, return success
	elseif (found_ground_item.amount >= grinding_recipe.ground_amount)
		if(!ReserveItem(found_ground_item)) return 0; endif
		return found_ground_item.amount;

	//otherwise, return failure
	else
		return 0;
	endif
endfunction




///////////////////
//  This is the function that does the fancy animation of the mill
//  and acts as a time delay
///////////////////

function animate_mill(character, mill_part, other_mill_part )
	SendSysMessage(character, "You begin grinding.");
	PlaySoundEffect(character, 0x021f);

	if (mill_part.objtype == 0x1922)
		mill_part.graphic := 0x1926;
		other_mill_part.graphic := 0x1921;
	else
		mill_part.graphic := 0x1932;
		other_mill_part.graphic := 0x192d;
	endif

	sleep(1);

	if (mill_part.objtype == 0x1922)
		other_mill_part.graphic := 0x1925;
	else
		other_mill_part.graphic := 0x1931;
	endif

	sleep(1);

	SendSysMessage(character, "Almost done.");

	sleep(1);

	if (mill_part.objtype == 0x1922)
		other_mill_part.graphic := 0x1920;
	else
		other_mill_part.graphic := 0x192c;
	endif

	sleep(1);

	if (mill_part.objtype == 0x1922)
		mill_part.graphic := 0x1922;
	else
		mill_part.graphic := 0x192e;
	endif

endfunction




///////////////////
//  this function destroys the specified amount of the specified ingredient.
///////////////////

function destroy_ingredient(character, grinding_recipe, makable_batches)

	//use FindObjtypeInContainer to find what we're looking for
	var found_ground_item := FindObjtypeInContainer(character.backpack, grinding_recipe.ground_item);

	SubtractAmount(found_ground_item, grinding_recipe.ground_amount * makable_batches);

endfunction



