///////////////////
//  This program is the maim cooking program.  It reads in recipes from cooking.cfg, decides what can 
//  be made by the character at the current time depending on what other ingredients they currently have,
//  their nearness to a fire or oven, and their skill.  It then lets them choose among the valid recipes
//  and cooks the one they selected.
///////////////////

use uo;
use os;
use cfgfile;

include "include/random";
include "include/attributes";
include "include/client";
include "include/yesno";
include "food";
include "include/autoloop";

//load the food dictionary.  This makes the recipe definitions in cooking.cfg much more understandable
var food_dictionary := define_food_dictionary();

//this is used to make sure that all recipes presented use the ingredient that was originally selected
var original_ingredient_objtype := 0;

program cook ( character, ingredient )

	original_ingredient_objtype := ingredient.objtype;

	//Go to a function that creates a menu and lets the user choose what to make
	var current_recipe := select_recipe(character);
	if (!current_recipe)
		return;
	endif

	//Now make sure that there's still a fire around to cook on.
	if ( !can_be_cooked(character, current_recipe) )
		SendSysMessage(character, "It appears that your fire has gone out.");
		AutoLoop_finish();
		return;
	endif

	//Now we send the player a nice message so they know exactly what they're trying to make
	SendSysMessage(character, "Making: " + current_recipe.menu_name );

	// Disabled: players shouldnt know what the skills needed are, have to find that out
	//SendSysmessage (character, "Requires: " + current_recipe.skill + " skill");

	SendSysMessage(character, current_recipe.ingredient_list);

	//Send an appropriate message and put in a time delay
	if ( !current_recipe.cooking_method )
		SendSysMessage(character, "You begin to mix the ingredients.");
		sleep(4);
	elseif (current_recipe.cooking_method == 2)
		SendSysMessage(character, "You place the item in the oven.");
		sleep(4);
	else
		SendSysMessage(character, "That's beginning to smell good!");
		sleep(4);
	endif
/*
	AutoLoop_init( character );
	while( AutoLoop_more() && check_for_all_ingredients(character, current_recipe) && not character.dead)
		
	
		//Now make sure that there's still a fire around to cook on.
		if ( !can_be_cooked(character, current_recipe) )
			SendSysMessage(character, "It appears that your fire has gone out.");
			AutoLoop_finish();
			return;
		endif
*/
	AutoLoop_init( character );
	while( AutoLoop_more() && check_for_all_ingredients(character, current_recipe) && not character.dead)


		if ( !can_be_cooked(character, current_recipe) )
			SendSysMessage(character, "It appears that your fire has gone out.");
			AutoLoop_finish();
			return;
		endif

		//do a skill check to see if the player was successful in making the recipe
		if ( CheckSkill(character, SKILLID_COOKING, current_recipe.skill, (current_recipe.skill*15)) )

			//success, so destroy the ingredients and create the product
			destroy_all_ingredients(character, current_recipe);
			create_product(character, current_recipe);

			//check to see if the recipe returns an item other than the product, and if so, create it
			if (current_recipe.extra_returns)
				create_extra_returns(character, current_recipe);
			endif
   
   SendSysMessage(character, "You finish up cooking the goods.");
   sleep(4);
   SendSysMessage(character, "You let it set to cool down.");
   sleep(2);

			//meaningless congratulations
			SendSysMessage(character, "You put the goods in your backpack.");

		//otherwise we have failure, so destroy ingredients
		else
			destroy_all_ingredients(character, current_recipe);

			//return the special return stuff, even though this try was a failure.  if you don't like this, just
			//comment out the next few lines
			if (current_recipe.extra_returns)
				create_extra_returns(character, current_recipe);
			endif

			//Now give a bad message dependent on how the material is cooked
			if (!current_recipe.cooking_method)
				SendSysMessage(character, "Whoops! You messed up.");
			else
				SendSysMessage(character, "Darn! You burned it!");
			endif
		endif

	endwhile
	AutoLoop_finish();

endprogram




///////////////////
//  This function is called when the recipe is successfullly made.  It creates the product and
//  sets any needed properties on that food
///////////////////

function create_product(character, current_recipe)
	//do a loop to create the product.  A loop is used in case a recipe produces 
	//multiple non-stackable products. -Removed. POL95 Doesn't stack items when CreateItemInBackpack
	var i;
//	for (i := 1; i <= current_recipe.product_amount; i := i + 1)
		var theproduct := CreateItemInBackpack(character, current_recipe.product_objtype, current_recipe.product_amount );

		//see if the product's name has changed, and if so, rename it
		if (current_recipe.product_name)
			theproduct.name := current_recipe.product_name;
		endif

		//see if the product's graphic has changed, and if so, change it
		if (current_recipe.product_graphic)
			theproduct.graphic := current_recipe.product_graphic;
		endif

		//see if the product's color has changed, and if so, dye it
//		if (current_recipe.product_color)
//			theproduct.color := current_recipe.product_color;
//		endif

		//set the food's nutritional value
		if (current_recipe.foodvalue)
			SetObjProperty(theproduct, "foodvalue", current_recipe.foodvalue);
		endif

//		Not currently implemented
//		//if the food has a special effect, associate that effect with the producted item
//		if (current_recipe.eaten_effect)
//			setobjproperty(theproduct, "eaten_effect", current_recipe.eaten_effect);
//		endif

//	endfor
endfunction




///////////////////
//  This function creates any items that a recipe returns in addition to the main product
///////////////////

function create_extra_returns(character, current_recipe)
	//Check through the current recipe and load all the extra returns into an array
	var return_array := GetConfigStringArray( current_recipe, "extra_returns" );
	var return_counter;
	var current_return;

	//now we cycle through all the ingredients
	for (return_counter := 1; return_counter == len(return_array); return_counter := return_counter + 1)

		//Pick the current return items out of the array.  the first part of this (current_return[1]) is the type of
		//return being created.  The second part (current_return[2]) is the number.
		current_return := SplitWords(return_array[return_counter]);

		//finally create the item
		var the_return := CreateItemInBackpack(character, food_dictionary[current_return[1]], CInt(current_return[2]) );
	endfor
endfunction




///////////////////
//  This function checks through the backpack and destroys ingredients
///////////////////

function destroy_all_ingredients(character, current_recipe)

	//Check through the current recipe and load all the ingredients into an array
	var ingredient_array := GetConfigStringArray( current_recipe, "ingredient" );
	var ingredient_counter;
	var current_ingredient;

	//now we cycle through all the ingredients
	for (ingredient_counter := 1; ingredient_counter <= len(ingredient_array); ingredient_counter := ingredient_counter + 1)

		//Pick the current ingredient out of the array and split it into 2 parts.  The first part, current_ingredient[1],
		//contains the type of ingredient that is being called for by the recipe.  The second part, current_ingredient[2],
		//is the number of that ingredien needed
		current_ingredient := SplitWords(ingredient_array[ingredient_counter]);

		//check to see if its one of the specially defined ingredients that require extra processing
		if (current_ingredient[1] == "ITEM_GENERAL_WATER")
			special_destroy_water(character, CInt(current_ingredient[2]));

		elseif (current_ingredient[1] == "ITEM_GENERAL_MILK")
			special_destroy_milk(character);

		elseif (current_ingredient[1] == "ITEM_GENERAL_CHEESE")
			special_destroy_cheese(character, CInt(current_ingredient[2]));

		//otherwise, its just a normal ingredient
		else
			//use the FindObjtypeInContainer function to find what we need 
			var found_ingredient := FindObjtypeInContainer(character.backpack, food_dictionary[current_ingredient[1]]);

			//Then, we subtract what we need from the stack
			SubtractAmount(found_ingredient, CInt(current_ingredient[2]) );
		endif

	endfor
endfunction




///////////////////
//  The function that decided what products can be
//  made, creates a menu that contains those products,
// and lets the user choose what to make
///////////////////

function select_recipe(character)

	//set up some data
	//first, load the cooking.cfg file that contains all the recipes
	var recipe_config_file := ReadConfigFile("cooking");

	//this is the number of recipes that are defined in the cooking.cfg file
	var num_recipes := GetConfigMaxIntKey( recipe_config_file );

	//this is the recipe that is currently being considered for validity
	var current_recipe := {};

	//this is an empty menu that will be filled with recipes that pass the check for validity
	var selectmenu := CreateMenu("What do you want to make?");

	//an array that contains all the recipes that are valid
	var array_of_valid_recipes := {};  //Array of valid recipes

	//just a counter
	var recipe_counter;

	//loop through all the recipes
	for (recipe_counter := 1; recipe_counter <= num_recipes; recipe_counter := recipe_counter+1)

		//read this recipe from the cooking.cfg file
		current_recipe := FindConfigElem(recipe_config_file, recipe_counter);

		//the first check is if the recipe can be cooked at this time
		if ( can_be_cooked(character, current_recipe) )

			//if it passes that check, then make sure that the player has all neccessary ingredients and the skill to make the recipe
			if ( check_for_all_ingredients(character, current_recipe) && has_skill(character, current_recipe))

				//OK, it appears that this is a valid recipe
				//Check to see if its graphic is something other than the default for its objtype
				if (current_recipe.product_graphic)
					//If so, add the replacement graphic to the menu
					AddMenuItem(selectmenu, current_recipe.product_graphic, current_recipe.menu_name);
				else
					//If not, just use the default graphic
					AddMenuItem(selectmenu, current_recipe.product_objtype, current_recipe.menu_name);
				endif

				//Add the current recipe to the list with the others
				array_of_valid_recipes[len(array_of_valid_recipes)+1] := current_recipe;
			endif
		endif
	endfor

	//If there's no recipes that can be made, give error and quit
	if (len(array_of_valid_recipes) == 0)
		SendSysMessage(character, "You can't make anything with that right now.");
		return 0;

	//If there's only 1 possible recipe, just make it automatically
	elseif (len(array_of_valid_recipes) == 1)
		return array_of_valid_recipes[1];
	endif

	//Otherwise, display the menu and allow the user to choose
	var selection := SelectMenuItem2(character, selectmenu);

	//Make sure they selected a valid item
	if (!selection)
		SendSysMessage(character,"Canceled");
		return 0;
	endif

	//Then return the recipe that was selected
	return array_of_valid_recipes[selection.index];
endfunction




///////////////////
//  This function checks to see if all the ingredients
//  called for in the recipe are available
///////////////////

function check_for_all_ingredients(character, current_recipe)

	//some setup
	//load the ingredient list from the current recipe into an array
	var ingredient_array := GetConfigStringArray( current_recipe, "ingredient" );

	//the ingredient that is currently being searched for
	var current_ingredient;

	//this is an incremental counter used to cycle through the ingredients
	var ingredient_counter;

	//Make sure that there's at least 1 ingredient.  If not, something is very, very wrong
	if ( len(	ingredient_array) <= 0 )
		SendSysMessage(character, "There is an error in the recipe for" + current_recipe.menu_name );
		return 0;
	endif

	//Now we set up a hack to make sure that the originally selected ingredient is used in any recipe that
	//is determined to be valid.  If this isn't done, all recipies that are possible to make, including ones
	//that don't use this ingredient, would be available.
	var used_selected_ingredient := 0;

	//now we cycle through all the ingredients
	for (ingredient_counter := 1; ingredient_counter <= len(ingredient_array); ingredient_counter := ingredient_counter + 1)

		//Pick the current ingredient out of the array and split it into 2 parts.  The first part, current_ingredient[1],
		//contains the type of ingredient that is being called for by the recipe.  The second part, current_ingredient[2],
		//is the number of that ingredien needed
		current_ingredient := SplitWords(ingredient_array[ingredient_counter]);

		//Here is where we check to see if the ingredient that we just picked out of the ingredient
		//list is the one that actually was originally selected.  If this isn't done, all the recipes
		//that can currently be made show up, even if they don't use the ingredient already picked.
		//Its kind of a messy hack but it's the best thing I can think of using the ingredient list
		//method.  The !selected_ingredient is used when the recipe is looping (in case the original
		//item was destroyed) since there could still be others of it's type.
		if ( food_dictionary [ current_ingredient[1] ] == original_ingredient_objtype )
			used_selected_ingredient := 1;
		endif

		//check to see if the item that was defined in the recipe was a special item.  these require somewhat
		//more complex processing so they're put in a seperate function
		if (current_ingredient[1] == "ITEM_GENERAL_WATER")
			if (!special_find_water(character, CInt(current_ingredient[2])))
				return 0;
			endif

		elseif (current_ingredient[1] == "ITEM_GENERAL_MILK")
			if (!special_find_milk(character))
				return 0;
			endif

		elseif (current_ingredient[1] == "ITEM_GENERAL_CHEESE")
			if (!special_find_cheese(character, CInt(current_ingredient[2])))
				return 0;
			endif



		else
			//use the FindObjtypeInContainer function to try to find what we need quickly.  If it
			//fails, or finds less of the ingredient than we need, fail this recipe.  Otherwise, reserve
			//what was found and try the next ingredient
			var found_ingredient := FindObjtypeInContainer(character.backpack, food_dictionary [current_ingredient[1]]);

			if (!found_ingredient)
				return 0;
			elseif (found_ingredient.amount < CInt(current_ingredient[2]))
				return 0;
			else
				if(!ReserveItem(found_ingredient)) return 0; endif
			endif
		endif
	endfor

	//It appears we've made it through all of the ingredients.  Return success if the originally selected
	//ingredient was used in this recipe.  Otherwise, fail.
	if (used_selected_ingredient)
		return 1;
	else
		return 0;
	endif
endfunction




///////////////////
//  This function checks to see if there's even a chance to make the product
///////////////////

function has_skill(character, current_recipe)
	var skill := CInt(GetAttribute(character, ATTRIBUTEID_COOKING));
	if ( skill >= (current_recipe.skill - 20) )
		return 1;
	endif
	return 0;
endfunction




///////////////////
//  Determines whether the recipe can be made dependant upon what cooking surfaces are available in the area
///////////////////
function cookon(who, item)
  SendSysMessage(who, "Select the heat source to cook that on.");
  var trg := Target(who);
  if(!trg)
    SendSysMessage(who, "cancelled.");
    return 0;
  endif
  if(!Accessible(who, trg))
    SendSysMessage(who, "You cannot reach that.");
    return 0;
  endif
  if((trg.objtype >= 0x08cf) && (trg.objtype <= 0x08df))
    return 1;
  elseif((trg.objtype >= 0x092b) && (trg.objtype <= 0x096c))
    return 1;
  elseif((trg.objtype >= 0x45d) && (trg.objtype <= 0x48e))
    return 1;
  elseif((trg.objtype >= 0x0de3) && (trg.objtype <= 0x0de9))
    return 1;
  elseif((trg.objtype >= 0x0e31) && (trg.objtype <= 0x0e33))
    return 1;
  elseif((trg.objtype >= 0x1849) && (trg.objtype <= 0x1850))
    return 1;
  elseif((trg.objtype >= 0x197a) && (trg.objtype <= 0x19a9))
    return 1;
  elseif((trg.objtype >= 0x0de3) && (trg.objtype <= 0x0de9))
    return 1;
  elseif((trg.objtype == 0x19bb) || (trg.objtype == 0x0fb1))
    return 1;
  else
    SendSysMessage(who, "You cannot cook food on that.");
    return 0;
  endif
endfunction


function can_be_cooked(character, current_recipe)

    Var near := ListItemsNearLocation(character.x, character.y, character.z,2);

	//if there's no cooking requirement, return success immediately
	if (!current_recipe.cooking_method)
		return 1;

	//else if it requires a fire, search through all var items for a fire
	elseif (current_recipe.cooking_method == 1)
		foreach item in near
			if ((item.objtype >= 0x045d) && (item.objtype <= 0x0460))
				return 1;
			elseif ((item.objtype >= 0x0475) && (item.objtype <= 0x048e))
				return 1;
			elseif ((item.objtype >= 0x0935) && (item.objtype <= 0x096c))
				return 1;
			elseif ((item.objtype >= 0x0de3) && (item.objtype <= 0x0de8))
				return 1;
			endif
		endforeach
		return 0;

	//else if it requires an oven, search for an oven
	elseif (current_recipe.cooking_method == 2)
		foreach item in near
			if ((item.objtype >= 0x0461) && (item.objtype <= 0x046f))
				return 1;
			elseif ((item.objtype >= 0x092b) && (item.objtype <= 0x0934))
				return 1;
			endif
		endforeach
		return 0;

	//else if it can be made in either a fire of an oven, check for both
	elseif (current_recipe.cooking_method == 3)
		foreach item in near
			if ((item.objtype >= 0x0461) && (item.objtype <= 0x046f))
				return 1;
			elseif ((item.objtype >= 0x092b) && (item.objtype <= 0x0934))
				return 1;
			elseif ((item.objtype >= 0x045d) && (item.objtype <= 0x0460))
				return 1;
			elseif ((item.objtype >= 0x0475) && (item.objtype <= 0x048e))
				return 1;
			elseif ((item.objtype >= 0x0935) && (item.objtype <= 0x096c))
				return 1;
			elseif ((item.objtype >= 0x0de3) && (item.objtype <= 0x0de8))
				return 1;
			endif
		endforeach
		return 0;

	//else if for some reason it's none of the above, return failure
	else
		return 0;
	endif
endfunction
