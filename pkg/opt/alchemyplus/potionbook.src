use uo;
use cfgfile;

include "alchemy";

//load the reagent name dictionary
var reagent_name_dict := define_reagent_name_dictionary();

//couple of constants
const BUTTON_NEXT_PAGE	:=	"button 294 5 2206 2206 0 2";
const BUTTON_LAST_PAGE	:=	"button 23 6 2205 2205 0 2";

program display_potionbook (character, book)

	//call a function that searches through alchemyplus.cfg and uses that information to create an array of
	//all the potions that should be shown in the potionbook
	var array_of_potions := create_array_of_potions();

	//now we define and set up some of the original data for the book layout
	var book_layout := {
		"page 0",
		"gumppic 0 0 2200"
	};

	//now create the book data
	var book_data := array ( "filler" );

	//whatever potion is currently being parsed, and a counter for it
	var current_potion := {};
	var current_potion_number := 0;

	//array of reagents for a potion and the current reagent picked out of the array
	var reagent_array := {};
	var current_reagent;

	//counter that keeps track of the number of reagents in a potion
	var reagent_counter := 1;

	//counter that keeps track of the number of strings in a book
	var current_string_number := 1;

	//counter that keeps track of the current book page number
	var current_book_page := 1;

	//this is the variable used to stop setting up the potionbook when the last page is reached
	var finished_setup := 0;

	//just a temporary string holder and a number used for placing strings
	var temporary_string := "";
	var temporary_string_position := 0;

	//now we start looping through each page and adding potions
	repeat

		//add the next page number to the book layout
		book_layout.append ( CStr("page " + current_book_page) );

		//define the current potion in terms of the current page number
		current_potion_number := (current_book_page-1)*2+1;
		current_potion := array_of_potions [ current_potion_number ];

		//if we're the first page, then we need to add the tab to go to the next page
		if (current_book_page == 1)
			book_layout.append (CStr("button 294 5 2206 2206 0 " + (current_book_page+1) ) );
		//else if its the last page, just add the previous page tab
		elseif ( (current_potion_number == len(array_of_potions) ) || (current_potion_number == len(array_of_potions) - 1 ) )
			book_layout.append (CStr("button 23 6 2205 2205 0 " + (current_book_page-1) ) );
		//otherwise add both tabs
		else
			book_layout.append (CStr("button 294 5 2206 2206 0 " + (current_book_page+1) ) );
			book_layout.append (CStr("button 23 6 2205 2205 0 " + (current_book_page-1) ) );
		endif

		//put in the first potion, starting with the potion name
		//capitalize the first letter of the name
		temporary_string := current_potion.book_name_1;
		temporary_string[1] := upper(current_potion.book_name_1[1]);
		book_data.append(temporary_string);
		book_layout.append ("text 32 25 0 " + CStr(current_string_number) );
		current_string_number := current_string_number + 1;

		//overwrite the first letter of the potion name with another in blue
		temporary_string := upper(current_potion.book_name_1[1]);
		book_data.append(temporary_string);
		book_layout.append ("text 32 25 9 " + CStr(current_string_number) );
		current_string_number := current_string_number + 1;

		//now for the second line of the potion title, if it exists
		if (current_potion.book_name_2)
			temporary_string := current_potion.book_name_2;
			book_data.append(temporary_string);
			book_layout.append ("text 40 40 0 " + CStr(current_string_number) );
			current_string_number := current_string_number + 1;
		endif

		//load the reagent list from the current potion into an array
		var reagent_array := GetConfigStringArray( current_potion, "reagent" );
		temporary_string_position := 80;
		foreach current_reagent in reagent_array
			temporary_string := describe_reagent(current_reagent);
			book_data.append(temporary_string);
			book_layout.append ("text 35 " + temporary_string_position + " 0 " + CStr(current_string_number) );
			current_string_number := current_string_number + 1;
			temporary_string_position := temporary_string_position + 15;
		endforeach

		//add if it needs a mortar
		if (current_potion.needmortar)
			book_data.append("mortar");
			book_layout.append ("text 35 " + temporary_string_position + " 0 " + CStr(current_string_number) );
			current_string_number := current_string_number + 1;
			temporary_string_position := temporary_string_position + 15;
		endif

		//whether it can be made in a bottle or keg
		if ( describe_container_requirements(current_potion) )
			book_data.append( describe_container_requirements(current_potion) );
			book_layout.append ("text 35 " + temporary_string_position + " 0 " + CStr(current_string_number) );
			current_string_number := current_string_number + 1;
			temporary_string_position := temporary_string_position + 15;
		endif

		//check to see if this is the last potion.  If so, skip putting the other potion on the other side of the page
		if (current_potion_number == len(array_of_potions) )
			finished_setup := 1;
		else

			current_potion_number := (current_book_page)*2;
			current_potion := array_of_potions [ current_potion_number ];

			//put in the first potion, starting with the potion name
			//capitalize the first letter of the name
			temporary_string := current_potion.book_name_1;
			temporary_string[1] := upper(current_potion.book_name_1[1]);
			book_data.append(temporary_string);
			book_layout.append ("text 190 25 0 " + CStr(current_string_number) );
			current_string_number := current_string_number + 1;

			//overwrite the first letter of the potion name with another in blue
			temporary_string := upper(current_potion.book_name_1[1]);
			book_data.append(temporary_string);
			book_layout.append ("text 190 25 9 " + CStr(current_string_number) );
			current_string_number := current_string_number + 1;

			//now for the second line of the potion title, if it exists
			if (current_potion.book_name_2)
				temporary_string := current_potion.book_name_2;
				book_data.append(temporary_string);
				book_layout.append ("text 205 40 0 " + CStr(current_string_number) );
				current_string_number := current_string_number + 1;
			endif

			//load the reagent list from the current potion into an array
			var reagent_array := GetConfigStringArray( current_potion, "reagent" );
			temporary_string_position := 80;
			foreach current_reagent in reagent_array
				temporary_string := describe_reagent(current_reagent);
				book_data.append(temporary_string);
				book_layout.append ("text 192 " + temporary_string_position + " 0 " + CStr(current_string_number) );
				current_string_number := current_string_number + 1;
				temporary_string_position := temporary_string_position + 15;
			endforeach

			//add if it needs a mortar
			if (current_potion.needmortar)
				book_data.append("mortar");
				book_layout.append ("text 192 " + temporary_string_position + " 0 " + CStr(current_string_number) );
				current_string_number := current_string_number + 1;
				temporary_string_position := temporary_string_position + 15;
			endif

			//whether it can be made in a bottle or keg
			if ( describe_container_requirements(current_potion) )
				book_data.append( describe_container_requirements(current_potion) );
				book_layout.append ("text 192 " + temporary_string_position + " 0 " + CStr(current_string_number) );
				current_string_number := current_string_number + 1;
				temporary_string_position := temporary_string_position + 15;
			endif

			//check to see if this one is the final potion
			if (current_potion_number == len(array_of_potions) )
				finished_setup := 1;
			endif
		endif

		//increment to the next book page
		current_book_page := current_book_page + 1;
	until (finished_setup);

	//and finally we send the completed potionbook to the character to look through
	SendDialogGump( character, book_layout, book_data );

endprogram




///////////////////
//  opens the alchemyplus.cfg potion, reads through all the potions that are contained in it
///////////////////

function create_array_of_potions()
	//starting by setting up data
	//load in the cooking.cfg file that contains all the potions
	var potion_config_file := ReadConfigFile("alchemyplus");

	//find out how many potions are contained in the cooking.cfg file	
	var number_of_potions := GetConfigMaxIntKey(potion_config_file);

	//this is an array that contains all the potions that should be displayed in the cookbook.  This
	//isn't neccessarily all the potions in the cooking.cfg file
	var array_of_potions := {};

	//this is whatever potion is currently being considered
	var current_potion;

	//just an incremental counter used to go through all the potions in the cooking.cfg file
	var potion_counter := 1;

	//another counter that keeps track of each potion added to array_of_potions
	var array_counter := 1;

	//now we go through all the potions defined in the cookbook to find those that are supposed to be displayed
	for (potion_counter := 1; potion_counter <= number_of_potions; potion_counter := potion_counter + 1)
		//pick the current potion out of the config file
		current_potion := FindConfigElem(potion_config_file, potion_counter);

		//add it to the array of potions
		array_of_potions[array_counter] := current_potion;
		array_counter := array_counter + 1;
	endfor

	return array_of_potions;

endfunction




///////////////////
//  this function looks at the reagent that was passed to it, and returns a string that best describes
//  that reagents
///////////////////

function describe_reagent(reagent)

	var return_string := "";
	var temp_split_words := SplitWords(reagent);
	var reagent_type := CInt(temp_split_words[1]);
	var reagent_number := CInt(temp_split_words[2]);

	//if the potion requires 1 or 0 of an item, just use the default string
	if ( reagent_number == 1 || reagent_number == 0)
		return_string := CStr( "1 " + reagent_name_dict[reagent_type] );
	elseif (reagent_type == 0x0f7d)
		return_string := CStr( reagent_number + " vials of blood");
	elseif (reagent_type == 0x0f8f || reagent_type == 0x0f84 || reagent_type == 0x0f85 || reagent_type == 0x0f7b || reagent_type == 0x0f8d)
		return_string := CStr( reagent_number + " " + reagent_name_dict[reagent_type] );
	elseif (reagent_type == 0x0f8c || reagent_type == 0x0f88 || reagent_type == 0x0f81 || reagent_type == 0x0f86)
		return_string := CStr( reagent_number + " " + reagent_name_dict[reagent_type] );
	elseif (reagent_type == 0x0f13 || reagent_type == 0x0f14 || reagent_type == 0x0f1a || reagent_type == 0x0f1c || reagent_type == 0x0f1d || reagent_type == 0x0f2a || reagent_type == 0x0f2b)
		return_string := CStr( reagent_number + " rubies");
	else
		return_string := CStr( reagent_number + " " + reagent_name_dict[reagent_type] + "s");
	endif

	return return_string;
endfunction




///////////////////
//  returns a string that describes the bottling or kegging requirments of the potion
///////////////////

function describe_container_requirements(current_potion)
	var return_string := "";

	if (current_potion.make_in_keg && current_potion.consume_bottle)
		return_string := "a bottle or keg";
	elseif (current_potion.consume_bottle)
		return_string := "a bottle";
	endif

	return return_string;
endfunction



